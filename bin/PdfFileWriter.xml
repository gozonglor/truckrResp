<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdfFileWriter</name>
    </assembly>
    <members>
        <member name="T:PdfFileWriter.BarcodeBox">
            <summary>
            Barcode box class
            </summary>
            <remarks>
            The barcode box class represent the total size of the barcode
            plus optional text. It is used by PdfTable class.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.BarcodeBox.OriginX">
            <summary>
            Barcode origin X
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeBox.OriginY">
            <summary>
            Barcode origin Y
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeBox.TotalWidth">
            <summary>
            Total width including optional text.
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeBox.TotalHeight">
            <summary>
            Total height including optional text.
            </summary>
        </member>
        <member name="M:PdfFileWriter.BarcodeBox.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for no text
            </summary>
            <param name="TotalWidth">Total width</param>
            <param name="TotalHeight">Total height</param>
        </member>
        <member name="M:PdfFileWriter.BarcodeBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor for text included
            </summary>
            <param name="OriginX">Barcode origin X</param>
            <param name="OriginY">Barcode origin Y</param>
            <param name="TotalWidth">Total width</param>
            <param name="TotalHeight">Total height</param>
        </member>
        <member name="T:PdfFileWriter.Barcode">
            <summary>
            One dimension barcode base class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#BarcodeSupport">2.5 Barcode Support</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode.#ctor">
            <summary>
            Protected barcode constructor
            </summary>
            <remarks>This class cannot be instantiated by itself.</remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode.BarWidth(System.Int32)">
            <summary>
            Width of single bar code at indexed position expressed in narrow bar units.
            </summary>
            <param name="Index">Bar's index number.</param>
            <returns>Bar's width in narrow bar units.</returns>
            <remarks>This virtual function must be implemented by derived class 
            Index range is 0 to BarCount - 1</remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode.GetBarcodeBox(System.Double,System.Double,PdfFileWriter.PdfFont,System.Double)">
            <summary>
            Calculate total barcode height including text
            </summary>
            <param name="BarWidth">Narrow bar width</param>
            <param name="BarcodeHeight">Barcode height</param>
            <param name="TextFont">Text font</param>
            <param name="FontSize">Text font size</param>
            <returns>BarcodeBox result</returns>
        </member>
        <member name="P:PdfFileWriter.Barcode.CodeArray">
            <summary>
            Gets a copy of CodeArray
            </summary>
        </member>
        <member name="P:PdfFileWriter.Barcode.Text">
            <summary>
            Text String
            </summary>
        </member>
        <member name="P:PdfFileWriter.Barcode.BarCount">
            <summary>
            Total number of black and white bars
            </summary>
        </member>
        <member name="P:PdfFileWriter.Barcode.TotalWidth">
            <summary>
            Total barcode width in narrow bar units.
            </summary>
        </member>
        <member name="T:PdfFileWriter.Barcode128">
            <summary>
            Barcode 128 Class
            </summary>
            <remarks>
            This program supports ASCII range of 0 to 127. 
            Character range 128 to 255 is not supported.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.Barcode128.CODE_CHAR_BARS">
            <summary>
            Each code128 character is encoded as 3 black bars and 3 white bars.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.CODE_CHAR_WIDTH">
            <summary>
            Each code128 character width is 11 narrow bars.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.FNC1_CHAR">
            <summary>
            Function character FNC1.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.FNC2_CHAR">
            <summary>
            Function character FNC2.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.FNC3_CHAR">
            <summary>
            Function character FNC3.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.FNC1">
            <summary>
            Special code FNC1.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.FNC2">
            <summary>
            Special code FNC2.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.FNC3">
            <summary>
            Special code FNC3.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.SHIFT">
            <summary>
            Special code SHIFT.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.CODEA">
            <summary>
            Special code CODEA (or FN4 for code set A).
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.CODEB">
            <summary>
            Special code CODEB (or FN4 for code set B).
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.CODEC">
            <summary>
            Special code CODEC.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.STARTA">
            <summary>
            Special code STARTA.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.STARTB">
            <summary>
            Special code STARTB.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.STARTC">
            <summary>
            Special code STARTC.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.STOP">
            <summary>
            Special code STOP.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode128.CodeTable">
            <summary>
            Code table for barcode 128
            </summary>
            <Remarks>
            <para>
            Barcode 128 consists of 107 codes.
            </para>
            <para>
            Each code is made of 6 bars, three black bars and three white bars.
            Each bar is expressed as multiple of the narrow bar.
            </para>
            <para>
            Total width of one bar code is always 11 narrow bar units.
            </para>
            <para>
            After the stop code there is always one more black bar
            with width of two units.
            </para>
            <para>
            Each code can have one of three possible meanings
            depending on the mode (CODEA, CODEB, CODEC).
            </para>
            <para>
            The CodeTable array dimensions are [107, 6].
            </para>
            </Remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode128.BarWidth(System.Int32)">
            <summary>
            Width of one bar at indexed position in narrow bar units.
            </summary>
            <param name="Index">Bar's index number.</param>
            <returns>Bar's width in narrow bar units.</returns>
            <remarks>This virtual function must be implemented by derived class 
            Index range is 0 to BarCount - 1</remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode128.#ctor(System.String)">
            <summary>
            Barcode 128 constructor
            </summary>
            <param name="Text">Input text</param>
            <remarks>
            <para>
            Convert text to code 128.
            </para>
            <para>>
            Valid input characters are ASCII 0 to 127.
            </para>
            <para>>
            In addition three control function codes are available
            </para>
            <para>>
            FNC1_CHAR = (Char) 256;
            </para>
            <para>>
            FNC2_CHAR = (Char) 257;
            </para>
            <para>>
            FNC3_CHAR = (Char) 258;
            </para>
            <para>>
            The constructor will optimize the translation of text to code.
            The code array will be divided into segments of
            CODEA, CODEB and CODEC
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode128.#ctor(System.Int32[])">
            <summary>
            Barcode 128 constructor
            </summary>
            <param name="_CodeArray">Code array</param>
            <remarks>
            <para>
            Set Code Array and convert it to text.
            </para>
            <para>
            Each code must be 0 to 106.
            </para>
            <para>
            The first code must be 103, 104 or 105.
            </para>
            <para>
            The stop code 106 if present must be the last code.
            </para>
            <para>
            If the last code is not 106, the method calculates the checksum
            and appends the checksum and the stop character to the end of the array.
            </para>
            <para>
            If the stop code is missing you must not have a checksum.
            If the last code is 106, the method recalculates the checksum
            and replaces the existing checksum.
            </para>
            <para>
            The text output is made of ASCII characters 0 to 127 and
            three function characters 256, 257 and 258.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.Barcode39">
            <summary>
            Barcode 39 class
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode39.CODE_CHAR_BARS">
            <summary>
            Each code39 code is encoded as 5 black bars and 5 white bars.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode39.CODE_CHAR_WIDTH">
            <summary>
            Total length expressed in narrow bar units.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode39.START_STOP_CODE">
            <summary>
            Barcode39 start and stop character (normally displayed as *).
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode39.CharSet">
            <summary>
            Barcode39 supported characters.
            </summary>
        </member>
        <member name="F:PdfFileWriter.Barcode39.CodeTable">
            <summary>
            Code table for barcode 39
            </summary>
            <remarks>Array size [44, 10]</remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode39.BarWidth(System.Int32)">
            <summary>
            Bar width as function of position in the barcode 39 
            </summary>
            <param name="Index">Array index.</param>
            <returns>Width of one bar</returns>
        </member>
        <member name="M:PdfFileWriter.Barcode39.#ctor(System.String)">
            <summary>
            Barcode 39 constructor
            </summary>
            <param name="Text">Barcode text</param>
            <remarks>
            <para>
            The constructor converts the text into code.
            </para>
            <para>
            Valid characters are:
            </para>
            <list type="table">
            <item><description>Digits 0 to 9</description></item>
            <item><description>Capital Letters A to Z</description></item>
            <item><description>Dash '-'</description></item>
            <item><description>Period '.'</description></item>
            <item><description>Space ' '</description></item>
            <item><description>Dollar '$'</description></item>
            <item><description>Slash '/'</description></item>
            <item><description>Plus '+'</description></item>
            <item><description>Percent '%'</description></item>
            <item><description>Asterisk '*' (This is the start and stop
            character. It cannot be in the middle of the text).</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.Barcode39.#ctor(System.Int32[])">
            <summary>
            Barcode 39 constructor
            </summary>
            <param name="_CodeArray">Code array</param>
            <remarks>
            <para>
            Sets code array and converts to equivalent text.
            </para>
            <para>
            If the code array is missing the start and/or stop characters,
            the constructor will add them.
            </para>
            <para>
            Valid codes are:
            </para>
            <list type="table">
            <item><term>0 to 9</term><description>Digits 0 to 9</description></item>
            <item><term>10 to 35</term><description>Capital Letters A to Z</description></item>
            <item><term>36</term><description>Dash '-'</description></item>
            <item><term>37</term><description>Period '.'</description></item>
            <item><term>38</term><description>Space ' '</description></item>
            <item><term>39</term><description>Dollar '$'</description></item>
            <item><term>40</term><description>Slash '/'</description></item>
            <item><term>41</term><description>Plus '+'</description></item>
            <item><term>42</term><description>Percent '%'</description></item>
            <item><term>43</term><description>Asterisk '*' (This is the start and stop
            character. It cannot be in the middle of the text)</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.BarcodeEAN13">
            <summary>
            Barcode EAN-13 or UPC-A class
            </summary>
            <remarks>
            Barcode EAN-13 or UPC-A
            Note UPC-A is a subset of EAN-13
            UPC-A is made of 12 digits
            EAN-13 is made of 13 digits
            If the first digit of EAN-13 is zero it is considered to be
            UPC-A. The zero will be eliminated.
            The barcode in both cases is made out of 12 symbols.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.BARCODE_LEN">
            <summary>
            Barcode length
            </summary>
            <remarks>
            Each code EAN-13 or UPC-A code is encoded as 2 black bars and 2 white bars
            there are exactly 12 characters in a barcode.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.BARCODE_HALF_LEN">
            <summary>
            Barcode half length
            </summary>
            <remarks>
            Each code EAN-13 or UPC-A code is encoded as 2 black bars and 2 white bars
            there are exactly 12 characters in a barcode
            </remarks>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.LEAD_BARS">
            <summary>
            Lead bars
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.SEPARATOR_BARS">
            <summary>
            Separator bars
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.CODE_CHAR_BARS">
            <summary>
            Code character bars
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.CODE_CHAR_WIDTH">
            <summary>
            Code character width
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.CodeTable">
            <summary>
            Code table for Barcode EAN-13 or UPC-A
            </summary>
            <remarks>Array size [20, 4]</remarks>
        </member>
        <member name="F:PdfFileWriter.BarcodeEAN13.ParityTable">
            <summary>
            Parity table
            </summary>
            <remarks>First digit of EAN-13 odd/even translation table</remarks>
        </member>
        <member name="M:PdfFileWriter.BarcodeEAN13.BarWidth(System.Int32)">
            <summary>
            Barcode width
            </summary>
            <param name="BarIndex">Code array index</param>
            <returns>Barcode EAN-13 single bar width</returns>
        </member>
        <member name="M:PdfFileWriter.BarcodeEAN13.GetBarcodeBox(System.Double,System.Double,PdfFileWriter.PdfFont,System.Double)">
            <summary>
            Calculate total barcode height including text
            </summary>
            <param name="BarWidth">Narrow bar width</param>
            <param name="BarcodeHeight">Barcode height</param>
            <param name="TextFont">Text font</param>
            <param name="FontSize">Text font size</param>
            <returns>BarcodeBox result</returns>
        </member>
        <member name="M:PdfFileWriter.BarcodeEAN13.#ctor(System.String)">
            <summary>
            Barcode EAN13 Constructor
            </summary>
            <param name="Text">Input text</param>
            <remarks>
            <para>
            Convert text to code EAN-13 or UPC-A.
            </para>
            <para>
            All characters must be digits.
            </para>
            <para>
            The code is EAN-13 if string length is 13 characters
            and first digit is not zero.
            </para>
            <para>
            The code is UPC-A if string length is 12 characters
            or string length is 13 and first character is zero.
            </para>
            <para>
            The last character is a checksum. The checksum must be
            given, however the constructor calculates the checksum and
            override the one given. In other words, if you do not
            know the checksum just set the last digit to 0.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.BarcodeEAN13.#ctor(System.Int32[])">
            <summary>
            Barcode EAN13 constructor.
            </summary>
            <param name="_CodeArray">Code array input.</param>
            <remarks>
            <para>
            The constructor sets CodeArray and converts it to text.
            </para>
            <para>
            CodeArray must be 12 elements long for both EAN-13 or UPC-A.
            </para>
            <para>
            In the case of UPC-A the 12 elements of code array correspond
            one to one with the 12 digits of the encoded value.
            </para>
            <para>
            In the case of EAN-13 the 12 code elements corresponds to
            element 2 to 13 of the text characters. The first text
            character controls how elements 2 to 5 of the code array are
            encoded. Please read the following article for full description.
            http://www.barcodeisland.com/ean13.phtml.
            </para>
            <para>
            In this class, odd parity encoding is one code element equals one digit.
            </para>
            <para>
            Even parity is code element equals digit plus 10.
            </para>
            <para>
            The last code element is a checksum. The checksum must be
            given however the constructor calculates the checksum and
            override the one given. In other words, if you do not
            know the checksum just set the last element to 0.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.BarcodeInterleaved2of5">
            <summary>
            Barcode interleaved 2 of 5 class
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeInterleaved2of5.CodeTable">
            <summary>
            Code table for interleave 2 of 5 barcode
            </summary>
        </member>
        <member name="M:PdfFileWriter.BarcodeInterleaved2of5.BarWidth(System.Int32)">
            <summary>
            Barcode width
            </summary>
            <param name="BarIndex">Code array index</param>
            <returns>Single bar width</returns>
        </member>
        <member name="M:PdfFileWriter.BarcodeInterleaved2of5.#ctor(System.String,System.Boolean)">
            <summary>
            Barcode interleave 2 of 5 constructor
            </summary>
            <param name="Text">Text</param>
            <param name="AddChecksum">Add checksum digit</param>
        </member>
        <member name="T:PdfFileWriter.CreateMetafile">
            <summary>
            Create image metafile class
            </summary>
        </member>
        <member name="M:PdfFileWriter.CreateMetafile.#ctor(System.Int32,System.Int32)">
            <summary>
            Create image metafile constructor
            </summary>
            <param name="Width">Image width in pixels.</param>
            <param name="Height">Image height in pixels.</param>
        </member>
        <member name="M:PdfFileWriter.CreateMetafile.SaveMetafile(System.String)">
            <summary>
            Save image metafile
            </summary>
            <param name="FileName">File name</param>
        </member>
        <member name="M:PdfFileWriter.CreateMetafile.DeleteMetafile">
            <summary>
            Delete image metafile.
            </summary>
        </member>
        <member name="M:PdfFileWriter.CreateMetafile.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="P:PdfFileWriter.CreateMetafile.Metafile">
            <summary>
            Gets image metafile.
            </summary>
        </member>
        <member name="P:PdfFileWriter.CreateMetafile.Graphics">
            <summary>
            Gets graphics object form image metafile.
            </summary>
        </member>
        <member name="T:PdfFileWriter.FileAttachIcon">
            <summary>
            File attachement icon
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.Graph">
            <summary>
            Graph
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.Paperclip">
            <summary>
            Paperclip
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.PushPin">
            <summary>
            PushPin (default)
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotation">
            <summary>
            PDF Annotation class
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfObject">
            <summary>
            PDF indirect object base class
            </summary>
            <remarks>
            PDF indirect object base class.
            User program cannot call it directly.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfObject.CompareTo(PdfFileWriter.PdfObject)">
            <summary>
            Compare the resource codes of two PDF objects.
            </summary>
            <param name="Other">Other PdfObject</param>
            <returns>Compare result</returns>
            <remarks>
            Used by PdfContents to maintain resource objects in sorted order.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfRectangle,PdfFileWriter.PdfWebLink)">
            <summary>
            PDF link annotation constructor
            </summary>
            <param name="Page">Associated page</param>
            <param name="AnnotRect">Annotation rectangle</param>
            <param name="WebLink">Weblink</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfRectangle,PdfFileWriter.PdfDisplayMedia)">
            <summary>
            PDF screen annotation constructor
            </summary>
            <param name="Page">Associated page</param>
            <param name="AnnotRect">Annotation rectangle</param>
            <param name="DisplayMedia">Display media class</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfRectangle,PdfFileWriter.PdfEmbeddedFile,PdfFileWriter.FileAttachIcon)">
            <summary>
            File attachement
            </summary>
            <param name="Page">Associated page</param>
            <param name="AnnotRect">Annotation rectangle</param>
            <param name="EmbeddedFile">Embedded file name</param>
            <param name="Icon">Icon</param>
            <remarks>
            <para>
            PDF specifications File Attachment Annotation page 637 table 8.35
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.ActivateActionWhenPageIsVisible(System.Boolean)">
            <summary>
            Activate annotation when page becomes visible.
            </summary>
            <param name="Activate">Activate or not-activate annotation.</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.DisplayBorder(System.Double)">
            <summary>
            Display border around annotation rectangle.
            </summary>
            <param name="BorderWidth">Border width</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.Appearance(PdfFileWriter.PdfXObject)">
            <summary>
            Annotation rectangle appearance
            </summary>
            <param name="AppearanceDixtionary">PDF X Object</param>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotation.AnnotationRect">
            <summary>
            Gets a copy of the annotation rectangle
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfDictionary">
            <summary>
            PDF dictionary class
            </summary>
            <remarks>
            <para>
            Dictionary key value pair class. Holds one key value pair.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfEmbeddedFile">
            <summary>
            PDF Embedded file class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfEmbeddedFile.#ctor(PdfFileWriter.PdfDocument,System.String,System.String)">
            <summary>
            PDF embedded file class constructor
            </summary>
            <param name="Document">Current document</param>
            <param name="FileName">File name</param>
            <param name="PdfFileName">PDF file name (see remarks)</param>
            <remarks>
            <para>
            FileName is the name of the source file on the disk.
            PDFFileName is the name of the as saved within the PDF document file.
            If PDFFileName is not given or it is set to null, the class takes
            the disk's file name without the path.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfEmbeddedFile.FileName">
            <summary>
            Gets file name
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfEmbeddedFile.MimeType">
            <summary>
            Gets Mime type
            </summary>
            <remarks>
            <para>
            The PDF embedded file translates the file extension into mime type string.
            If the translation fails the MimeType is set to null.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.ExtToMime.CompareTo(PdfFileWriter.ExtToMime)">
            <summary>
            Compare ExtToMime records
            </summary>
            <param name="Other">Other record</param>
            <returns></returns>
        </member>
        <member name="T:PdfFileWriter.PdfRectangle">
            <summary>
            PDF rectangle in double precision class
            </summary>
            <remarks>
            Note: Microsoft rectangle is left, top, width and height.
            PDF rectangle is left, bottom, right and top.
            PDF numeric precision is Double and Microsoft is Single.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Left">Left side</param>
            <param name="Bottom">Bottom side</param>
            <param name="Right">Right side</param>
            <param name="Top">Top side</param>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(PdfFileWriter.PdfRectangle)">
            <summary>
            Copy constructor
            </summary>
            <param name="Rect">Source rectangle</param>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(System.Double)">
            <summary>
            Constructor for margin
            </summary>
            <param name="AllTheSame">Single value for all sides</param>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for margin
            </summary>
            <param name="Hor">Left and right value</param>
            <param name="Vert">Top and bottom value</param>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Left">
            <summary>
            Gets or sets Left side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Bottom">
            <summary>
            Gets or sets bottom side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Right">
            <summary>
            Gets or sets right side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Top">
            <summary>
            Gets or sets top side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Width">
            <summary>
            Gets width
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Height">
            <summary>
            Gets height
            </summary>
        </member>
        <member name="T:PdfFileWriter.TempFilePermission">
            <summary>
            Temporary file permission enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPNEVER">
            <summary>
            Never allow PDF reader to write temporary file.
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPEXTRACT">
            <summary>
            Allow PDF reader to write temporary file based on extract permission flag.
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPACCESS">
            <summary>
            Allow PDF reader to write temporary file based on access permission flag.
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPALWAYS">
            <summary>
            Always allow PDF reader to write temporary file.
            </summary>
        </member>
        <member name="T:PdfFileWriter.MediaWindow">
            <summary>
            Media window position
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.Floating">
            <summary>
            Floating window
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.FullScreen">
            <summary>
            Full screen
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.Annotation">
            <summary>
            Annotation rectangle
            </summary>
        </member>
        <member name="T:PdfFileWriter.WindowPosition">
            <summary>
            Media image position within window
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.UpperLeft">
            <summary>
            Upper left
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.UpperCenter">
            <summary>
            Upper center
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.UpperRight">
            <summary>
            Upper right
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.CenterLeft">
            <summary>
            Center left
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.CenterRight">
            <summary>
            Center right
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.LowerLeft">
            <summary>
            Lower left
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.LowerCenter">
            <summary>
            lower center
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.LowerRight">
            <summary>
            Lower right
            </summary>
        </member>
        <member name="T:PdfFileWriter.WindowTitleBar">
            <summary>
            Floating window title bar
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowTitleBar.NoTitleBar">
            <summary>
            No title bar
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowTitleBar.TitleBar">
            <summary>
            Window has title bar
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowTitleBar.TitleBarWithCloseButton">
            <summary>
            Window has title bar with close button
            </summary>
        </member>
        <member name="T:PdfFileWriter.WindowResize">
            <summary>
            Floating window resize options
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowResize.NoResize">
            <summary>
            No resize
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowResize.KeepAspectRatio">
            <summary>
            Resize with correct aspect ratio
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowResize.NoAspectRatio">
            <summary>
            Resize without aspect ratio
            </summary>
        </member>
        <member name="T:PdfFileWriter.MediaOperation">
            <summary>
            Media operation code
            </summary>
            <remarks>
            <para>
            Operation to perform when rendition action is triggered.
            Page 669 T 8.64 S 8.5
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Play">
            <summary>
            Play
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Pause">
            <summary>
            Pause
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Resume">
            <summary>
            Resume
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.PlayAfterPause">
            <summary>
            Play after pause
            </summary>
        </member>
        <member name="T:PdfFileWriter.ScaleMediaCode">
            <summary>
            Scale media code
            </summary>
            <remarks>
            <para>
            Value 0 to 5 How to scale the media to fit annotation area page 770 T 9.15
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.KeepAspectRatioShowAll">
            <summary>
            Keep aspect ratio and show all.
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.KeepAspectRatioSlice">
            <summary>
            Keep aspect ratio fit the one side and slice the other
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.FillAnotationRect">
            <summary>
            Ignore aspect ratio and fill annotation rectangle
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.NoScaleWithScroll">
            <summary>
            No scaling. Provide scroll if required
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.NoScaleSlice">
            <summary>
            No scaling. Show what fits
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.PlayerDefault">
            <summary>
            Let media player handle it
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfDisplayMedia">
            <summary>
            PDF Screen annotation
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfDisplayMedia.#ctor(PdfFileWriter.PdfEmbeddedFile,System.String)">
            <summary>
            Display media constructor
            </summary>
            <param name="MediaFile">Embedded media file</param>
            <param name="MimeType">Mime type</param>
            <remarks>
            <para>
            If mime type is null the program will try to convert file extension
            to mime type. If conversion is not available application exception will be raised.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDisplayMedia.DisplayControls(System.Boolean)">
            <summary>
            Display media player controls
            </summary>
            <param name="Display">Display/no display command</param>
        </member>
        <member name="M:PdfFileWriter.PdfDisplayMedia.RepeatCount(System.Single)">
            <summary>
            Repeat count
            </summary>
            <param name="Count">Count</param>
            <remarks>
            <para>
            Count of zero means replay indefinitly.
            </para>
            <para>
            Negative count is an error.
            </para>
            <para>
            Count is a real (float) number. The PDF specification does not
            define how non integers are treated.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDisplayMedia.SetMediaWindow(PdfFileWriter.MediaWindow,System.Int32,System.Int32,PdfFileWriter.WindowPosition,PdfFileWriter.WindowTitleBar,PdfFileWriter.WindowResize,System.String)">
            <summary>
            Set media window
            </summary>
            <param name="MediaWindow">Media window</param>
            <param name="Width">Floating window width</param>
            <param name="Height">Floating window height</param>
            <param name="Position">Floating window position</param>
            <param name="TitleBar">Floating window title bar</param>
            <param name="Resize">Floating window resize</param>
            <param name="Title">Floating window title</param>
            <remarks>
            <para>
            All optional arguments are applicable to floating window only.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDisplayMedia.ScaleMedia(PdfFileWriter.ScaleMediaCode)">
            <summary>
            Scale media
            </summary>
            <param name="ScaleCode">Scale media code</param>
        </member>
        <member name="M:PdfFileWriter.PdfDisplayMedia.InitialMediaOperation(PdfFileWriter.MediaOperation)">
            <summary>
            Initial media operation
            </summary>
            <param name="OperationCode">Media operation code enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfDisplayMedia.MediaTempFilePermission(PdfFileWriter.TempFilePermission)">
            <summary>
            Media temporary file permission
            </summary>
            <param name="Permission">Permissions flags</param>
            <remarks><para>
            The PDF reader must save the media file to a temporary file
            in order for the player to play it.
            </para></remarks>
        </member>
        <member name="P:PdfFileWriter.PdfDisplayMedia.MediaFile">
            <summary>
            Gets embedded media file class
            </summary>
        </member>
        <member name="T:PdfFileWriter.BorderControl">
            <summary>
            Border lines or grid lines drawing control enumeration
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTable.BorderLineControl"/>
            <seealso cref="P:PdfFileWriter.PdfTable.GridLineControl"/>
        </member>
        <member name="F:PdfFileWriter.BorderControl.None">
            <summary>
            No border or grid lines.
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderControl.Horizontal">
            <summary>
            Horizontal border or grid lines.
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderControl.Vertical">
            <summary>
            Vertical border or grid lines.
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderControl.Both">
            <summary>
            Horizontal and vertical border and grid lines.
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfTableStart">
            <summary>
            PDF table start event handler delegate
            </summary>
            <param name="Table">Parent object.</param>
            <param name="TableStartPos">Table top's position on the page.</param>
            <remarks>
            The purpose of the table start event handler is to allow custom 
            drawing on the page before the header and the first row are drawn. 
            For example, drawing a title above the table.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTableEnd">
            <summary>
            PDF table end event handler delegate
            </summary>
            <param name="Table">Parent object.</param>
            <param name="TableEndPos">Table bottom's position on the page.</param>
            <remarks>
            The purpose of the table end event handler is to allow custom 
            drawing on the page after the last row was drawn. 
            For example, drawing comment below the table.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTableCustomDrawCell">
            <summary>
            PDF table custom draw cell event handler delegate
            </summary>
            <param name="Table">The current table object.</param>
            <param name="Cell">The current's cell object.</param>
            <returns>Action taken (see remarks).</returns>
            <remarks>
            <para>True if the event handler drew the cell.</para>
            <para>False if the event handler did not draw the cell.</para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTable">
            <summary>
            PDF data table drawing class
            </summary>
            <remarks>
            <para>
            The main class for drawing a data table within a PDF document.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DataTableSupport">2.12 Data Table Support</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawDataTable">For example of drawing image see 3.13. Draw Book Order Form</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfContents,PdfFileWriter.PdfFont,System.Double)">
            <summary>
            PdfTable constructor.
            </summary>
            <param name="Page">Current PdfPage.</param>
            <param name="Contents">Current PdfContents.</param>
            <param name="Font">Table's default font.</param>
            <param name="FontSize">Table's default font size.</param>
        </member>
        <member name="M:PdfFileWriter.PdfTable.SetColumnWidth(System.Double[])">
            <summary>
            Sets the number of columns, and column's widths.
            </summary>
            <param name="ColumnWidth">Array of column widths.</param>
            <remarks>
            <para>
            The length of the array sets the number of columns.
            </para>
            <para>
            This method builds two PdfTableCell arrays. One array for data cells, and
            the other array for header cells.
            </para>
            <para>
            The actual column widths will be calculated to fit the width of the table. 
            </para>
            <para>
            The calculation is done as follows. First the library calculates the amount
            of net space available after border lines and grid lines width is taken off
            the width of the table as specified in TableArea. Second, the net space is divided
            in proportion to the requested widths.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.PdfTableInitialization">
            <summary>
            PdfTable initialization.
            </summary>
            <remarks>
            Normally the system will call this method on first call to DrawRow(). 
            If called by user it must be called after initialization and before 
            the first row is drawn. This method sets the active flag.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.DrawRow">
            <summary>
            Draw one row.
            </summary>
            <remarks>
            The DrawRow method must be called for each row in the table.
            Before calling this method all PdfTableCell values for the current row must be set.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.Close">
            <summary>
            Close table.
            </summary>
            <remarks>
            The Close method must be called after the last row was drawn.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Active">
            <summary>
            Gets the table is active flag.
            </summary>
            <remarks>
            The active flag is set by the PdfTableInitialization method.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.BorderLineColor">
            <summary>
            Gets or sets the border lines color.
            </summary>
            <value>Border lines color. Default is Color.Black.</value>
        </member>
        <member name="P:PdfFileWriter.PdfTable.BorderLineControl">
            <summary>
            Gets or sets border lines control.
            </summary>
            <value>
            BorderControl enumeration is: None, Horizontal, Vertical or Both. Default value is Both.
            </value>
            <remarks>This property can only be set during initialization.</remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.BorderLineWidth">
            <summary>
            Gets or sets border lines width.
            </summary>
            <value>
            Default BorderLineWidth is 1.0 points.
            </value>
            <remarks>
            <para>
            Width of zero will be displayed by PDF readers as one 
            pixel on the output device. However, in column width calculations
            it will be taken as zero width.
            </para>
            <para>
            This property can only be set during initialization.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Cell">
            <summary>
            Gets array of cell items.
            </summary>
            <remarks>
            SetColumnWidth method creates the Cell array. 
            Cell array length is Columns. Each cell controls the drawing of one column.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.CellStyle">
            <summary>
            Creates a cell style object as a copy of the default cell style.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTable.ColumnPosition">
            <summary>
            Gets array of column positions.
            </summary>
            <remarks>
            <para>
            Column position is the centre of a border line or the centre of a grid line. 
            </para>
            <para>
            Position[0] is the left side of the table, and Position[Columns] is the right side of the table.
            </para>
            <para>
            The returned array is a copy of the internal array.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Columns">
            <summary>
            Gets the number of columns in the table.
            </summary>
            <value>The number of columns in the table.</value>
            <remarks>SetColumnWidth method sets this value.</remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.ColumnWidth">
            <summary>
            Gets array of column widths.
            </summary>
            <remarks>
            <para>
            Column width is from the center of border line or a grid line
            to the center of the next border line or grid line. 
            </para>
            <para>
            The returned array is a copy of the internal array.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Contents">
            <summary>
            Gets the current PDF contents object.
            </summary>
            <value>The current PDF contents object.</value>
            <remarks>
            The initial value is set by the constructor. 
            The value is updated as each new page is added.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.DefaultCellStyle">
            <summary>
            Gets the default cell style.
            </summary>
            <value>Default cell style.</value>
            <remarks>
            <para>
            The default cell style is used by cells without private style.
            </para>
            <para>
            The returned value is the default cell style object.
            A change to any of the syle properties will affect all cells
            without private style.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.DefaultHeaderStyle">
            <summary>
            Gets the default header style.
            </summary>
            <value>Default header style.</value>
            <remarks>
            <para>
            The default header style is used by headers without private style.
            </para>
            <para>
            The returned value is the default header style object.
            A change to any of the syle properties will affect all headers
            without private style.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Document">
            <summary>
            Gets the PDF document that owns this table.
            </summary>
            <valuw>PDF document the parent of this table.</valuw>
        </member>
        <member name="P:PdfFileWriter.PdfTable.GridLineColor">
            <summary>
            Gets or sets the grid lines color.
            </summary>
            <value>Grid lines color. Default is Color.Black.</value>
        </member>
        <member name="P:PdfFileWriter.PdfTable.GridLineControl">
            <summary>
            Gets or sets grid lines control.
            </summary>
            <value>BorderControl enumeration is: None, Horizontal, Vertical or Both. Default is Both.</value>
            <remarks>
            This property can only be set during initialization.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.GridLineWidth">
            <summary>
            Gets or sets grid lines width.
            </summary>
            <remarks>
            <para>
            Width of zero will be displayed by PDF readers as one 
            pixel on the output device. However, in column width calculations
            it will be taken as zero width.
            </para>
            <para>
            This property can only be set during initialization.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Header">
            <summary>
            Gets array of header items.
            </summary>
            <remarks>
            SetColumnWidth method creates Header array. Array length is Columns.
            Each header controls the drawing of one column's header.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.HeaderHeight">
            <summary>
            Gets the current header height.
            </summary>
            <value>Current header height.</value>
            <remarks>
            Header height is calculated once for each page.
            It is the height of the tallest header.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.HeaderOnEachPage">
            <summary>
            Gets or sets the flag controlling the drawing of the header row.
            </summary>
            <remarks>
            If the flag is true (the default), the header is drawn on each page. 
            If the flag is false, the header is drawn one time only at the start of the table.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.HeaderStyle">
            <summary>
            Creates a header style object as a copy of the default header style.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTable.MinRowHeight">
            <summary>
            Gets or sets minimum row height.
            </summary>
            <value>Minimum row height.</value>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Page">
            <summary>
            Gets the current PDF page object.
            </summary>
            <value>The current PDF page object.</value>
            <remarks>
            The initial value is set by the constructor. 
            The value is updated as each new page is added.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowBottomPosition">
            <summary>
            Gets the current row bottom position.
            </summary>
            <value>Row bottom position.</value>
            <remarks>
            Row bottom position is calculated for each row. It is RowTopPosition plus RowHeight. 
            The calculation is done within DrawRow method before any of the cells is drawn.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowHeight">
            <summary>
            Gets the current row height.
            </summary>
            <value>Current row height.</value>
            <remarks>
            Row height is calculated for each row. It is the height of the tallest cell. 
            The calculation is done within DrawRow method before any of the cells is drawn.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowNumber">
            <summary>
            Gets the current row number.
            </summary>
            <value>Row number starting with zero.</value>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowTopPosition">
            <summary>
            Gets or sets current row top position.
            </summary>
            <remarks>
            <para>
            Row top position can only be set during initialization.
            It should be set by the caller if on the first page the 
            table does not start at the top of the page.
            </para>
            <para>
            Row top position is calculated for each row. It is the last RowBottomPosition plus GridLineWidth. 
            The calculation is done within DrawRow method before any of the cells is drawn.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.TableArea">
            <summary>
            Gets or sets table area rectangle.
            </summary>
            <remarks>
            <para>
            Table area rectangle can only be set at initialization time. 
            </para>
            <para>
            The default table area is the default paper size less 1 inch margin. 
            </para>
            <para>
            Returned value is a copy of the internal rectangle.
            </para>
            </remarks>
        </member>
        <member name="E:PdfFileWriter.PdfTable.CustomDrawCellEvent">
            <summary>
            Sets the custom draw cell and header event handler.
            </summary>
            <remarks>
            The custom draw cell and header event handler is called each time a 
            cell or header is about to be drawn and RaiseCustomDrawCellEvent 
            property of cell style is set to true;
            </remarks>
        </member>
        <member name="E:PdfFileWriter.PdfTable.TableEndEvent">
            <summary>
            Sets the table end event handler.
            </summary>
            <remarks>
            The table end event handler is called at the end of each page and at the end of the table drawing.
            </remarks>
        </member>
        <member name="E:PdfFileWriter.PdfTable.TableStartEvent">
            <summary>
            Sets the table start event handler.
            </summary>
            <remarks>
            The table start event handler is called at the start of the table and at the top each subsequent page.
            <code>
            // example of table start event handler to display
            // heading above the table on each page
            void BookListTableStart
            	(
            	PdfTable	BookList,
            	Double		TableStartPos
            	)
            {
            Double PosX = 0.5 * (BookList.TableArea.Left + BookList.TableArea.Right);
            Double PosY = TableStartPos + TableTitleFont.Descent(16.0) + 0.05;
            BookList.Contents.DrawText(TableTitleFont, 16.0, PosX, PosY,
            	TextJustify.Center, DrawStyle.Normal, Color.Chocolate, "Book List PdfTable Example"); 
            return;
            }
            </code>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.BoundingBox">
            <summary>
            Glyph or text string bounding box class
            </summary>
            <remarks>
            The BoundingBox class is the output of GetGlyphMetricsApi method.
            It returns the glyph bounding box and character width.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.BoundingBox.#ctor">
            <summary>
            Bounding box default constructor
            </summary>
        </member>
        <member name="M:PdfFileWriter.BoundingBox.#ctor(PdfFileWriter.BoundingBox)">
            <summary>
            Bounding box copy constructor
            </summary>
            <param name="Box">Source box</param>
        </member>
        <member name="P:PdfFileWriter.BoundingBox.Rect">
            <summary>
            Gets bounding box rectangle.
            </summary>
        </member>
        <member name="P:PdfFileWriter.BoundingBox.Width">
            <summary>
            Gets bounding box width.
            </summary>
        </member>
        <member name="T:PdfFileWriter.FontBox">
            <summary>
            Font box class
            </summary>
            <remarks>
            FontBox class is part of OUTLINETEXTMETRIC structure
            </remarks>
        </member>
        <member name="P:PdfFileWriter.FontBox.Left">
            <summary>
            Gets left side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.FontBox.Top">
            <summary>
            Gets top side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.FontBox.Right">
            <summary>
            Gets right side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.FontBox.Bottom">
            <summary>
            Gets bottom side.
            </summary>
        </member>
        <member name="T:PdfFileWriter.WinPanose">
            <summary>
            Panose class
            </summary>
            <remarks>
            The PANOSE structure describes the PANOSE font-classification
            values for a TrueType font. These characteristics are then
            used to associate the font with other fonts of similar
            appearance but different names.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bFamilyType">
            <summary>
            Panose family type
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bSerifStyle">
            <summary>
            Panose serif style
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bWeight">
            <summary>
            Panose weight
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bProportion">
            <summary>
            Panose proportion
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bContrast">
            <summary>
            Panose contrast
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bStrokeVariation">
            <summary>
            Panose stroke variation
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bArmStyle">
            <summary>
            Panose arm style
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bLetterform">
            <summary>
            Panose letter form
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bMidline">
            <summary>
            Panose mid line
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bXHeight">
            <summary>
            Panose X height
            </summary>
        </member>
        <member name="T:PdfFileWriter.WinKerningPair">
            <summary>
            Kerning pair class
            </summary>
        </member>
        <member name="M:PdfFileWriter.WinKerningPair.#ctor(System.Char,System.Char)">
            <summary>
            Kerning pair constructor
            </summary>
            <param name="First">First character</param>
            <param name="Second">Second character</param>
        </member>
        <member name="M:PdfFileWriter.WinKerningPair.CompareTo(PdfFileWriter.WinKerningPair)">
            <summary>
            Compare kerning pairs
            </summary>
            <param name="Other">Other pair</param>
            <returns>Compare result</returns>
        </member>
        <member name="P:PdfFileWriter.WinKerningPair.First">
            <summary>
            Gets first character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinKerningPair.Second">
            <summary>
            Gets second character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinKerningPair.KernAmount">
            <summary>
            Gets kerning amount
            </summary>
        </member>
        <member name="T:PdfFileWriter.WinTextMetric">
            <summary>
            TextMetric class
            </summary>
            <remarks>
            The TEXTMETRIC structure contains basic information about a
            physical font. All sizes are specified in logical units;
            that is, they depend on the current mapping mode of the
            display context.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmHeight">
            <summary>
            TextMetric height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmAscent">
            <summary>
            TextMetric ascent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDescent">
            <summary>
            TextMetric descent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmInternalLeading">
            <summary>
            TextMetric internal leading
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmExternalLeading">
            <summary>
            TextMetric external leading
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmAveCharWidth">
            <summary>
            TextMetric average character width
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmMaxCharWidth">
            <summary>
            TextMetric maximum character width
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmWeight">
            <summary>
            TextMetric height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmOverhang">
            <summary>
            TextMetric overhang
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDigitizedAspectX">
            <summary>
            TextMetric digitize aspect X
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDigitizedAspectY">
            <summary>
            TextMetric digitize aspect Y
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmFirstChar">
            <summary>
            TextMetric first character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmLastChar">
            <summary>
            TextMetric last character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDefaultChar">
            <summary>
            TextMetric default character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmBreakChar">
            <summary>
            TextMetric break character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmItalic">
            <summary>
            TextMetric italic
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmUnderlined">
            <summary>
            TextMetric underlined
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmStruckOut">
            <summary>
            TextMetric struck out
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmPitchAndFamily">
            <summary>
            TextMetric pitch and family
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmCharSet">
            <summary>
            TextMetric character set
            </summary>
        </member>
        <member name="T:PdfFileWriter.WinOutlineTextMetric">
            <summary>
            Outline text metric class
            </summary>
            <remarks>
            The OUTLINETEXTMETRIC structure contains metrics describing
            a TrueType font.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmSize">
            <summary>
            Outline text metric size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmTextMetric">
            <summary>
            Outline text metric TextMetric
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmPanoseNumber">
            <summary>
            Outline text metric panose number
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmfsSelection">
            <summary>
            Outline text metric FS selection
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmfsType">
            <summary>
            Outline text metric FS type
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsCharSlopeRise">
            <summary>
            Outline text metric char slope rise
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsCharSlopeRun">
            <summary>
            Outline text metric char slope run
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmItalicAngle">
            <summary>
            Outline text metric italic angle
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmEMSquare">
            <summary>
            Outline text metric EM square
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmAscent">
            <summary>
            Outline text metric ascent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmDescent">
            <summary>
            Outline text metric descent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmLineGap">
            <summary>
            Outline text metric line gap
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsCapEmHeight">
            <summary>
            Outline text metric capital M height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsXHeight">
            <summary>
            Outline text metric X height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmrcFontBox">
            <summary>
            Outline text metric Font box class
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmMacAscent">
            <summary>
            Outline text metric Mac ascent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmMacDescent">
            <summary>
            Outline text metric Mac descent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmMacLineGap">
            <summary>
            Outline text metric Mac line gap
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmusMinimumPPEM">
            <summary>
            Outline text metric minimum PPEM
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSubscriptSize">
            <summary>
            Outline text metric subscript size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSubscriptOffset">
            <summary>
            Outline text metric subscript offset
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSuperscriptSize">
            <summary>
            Outline text metric superscript size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSuperscriptOffset">
            <summary>
            Outline text metric superscript offset
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsStrikeoutSize">
            <summary>
            Outline text metric strikeout size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsStrikeoutPosition">
            <summary>
            Outline text metric strikeout position
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsUnderscoreSize">
            <summary>
            Outline text metric underscore size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsUnderscorePosition">
            <summary>
            Outline text metric underscore position
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpFamilyName">
            <summary>
            Outline text metric family name
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpFaceName">
            <summary>
            Outline text metric face name
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpStyleName">
            <summary>
            Outline text metric style name
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpFullName">
            <summary>
            Outline text metric full name
            </summary>
        </member>
        <member name="T:PdfFileWriter.FontApi">
            <summary>
            Font API class
            </summary>
            <remarks>
            Windows API callable by C# program
            </remarks>
        </member>
        <member name="M:PdfFileWriter.FontApi.#ctor(System.Drawing.Font,System.Int32)">
            <summary>
            Font API constructor
            </summary>
            <param name="DesignFont">Design font</param>
            <param name="DesignHeight">Design height</param>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetCharWidthApi(System.Int32,System.Int32)">
            <summary>
            Gets character width array
            </summary>
            <param name="FirstChar">First character</param>
            <param name="LastChar">Last character</param>
            <returns>Array of character widths.</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetGlyphMetricsApi(System.Char)">
            <summary>
            Gets glyph metric
            </summary>
            <param name="CharCode">Character code</param>
            <returns>Bounding box</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetGlyphMetricsApi(System.Int32,System.Int32)">
            <summary>
            Gets array of glyph metrics
            </summary>
            <param name="FirstChar">First character</param>
            <param name="LastChar">Last character</param>
            <returns>Array of bounding boxes</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetKerningPairsApi(System.Int32,System.Int32)">
            <summary>
            Gets kerning pairs array
            </summary>
            <param name="FirstChar">First character</param>
            <param name="LastChar">Last character</param>
            <returns>Array of kerning pairs</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetOutlineTextMetricsApi">
            <summary>
            Gets OUTLINETEXTMETRICW structure
            </summary>
            <returns>Outline text metric class</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetTextMetricsApi">
            <summary>
            Gets TEXTMETRICW structure
            </summary>
            <returns>Text metric class</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetFontDataApi(System.Int32,System.Int32)">
            <summary>
            Gets font data tables
            </summary>
            <param name="Offset">Table offset</param>
            <param name="BufSize">Table size</param>
            <returns>Table info as byte array</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.GetGlyphIndicesApi(System.Int32,System.Int32)">
            <summary>
            Gets glyph indices array
            </summary>
            <param name="FirstChar">First character</param>
            <param name="LastChar">Last character</param>
            <returns>Array of glyph indices.</returns>
        </member>
        <member name="M:PdfFileWriter.FontApi.Dispose">
            <summary>
            Dispose unmanaged resources
            </summary>
        </member>
        <member name="T:PdfFileWriter.PointD">
            <summary>
            Point in double precision class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(System.Double,System.Double)">
            <summary>
            PointD constructor
            </summary>
            <param name="X">X</param>
            <param name="Y">Y</param>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(PdfFileWriter.PointD,System.Double,System.Double)">
            <summary>
            PointD constructor
            </summary>
            <param name="Center">Center point</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Angle</param>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            PointD constructor
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Angle</param>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(PdfFileWriter.LineD,PdfFileWriter.LineD)">
            <summary>
            PointD constructor
            </summary>
            <param name="L1">Line 1</param>
            <param name="L2">Line 2</param>
        </member>
        <member name="M:PdfFileWriter.PointD.Distance(PdfFileWriter.PointD)">
            <summary>
            Distance between two points
            </summary>
            <param name="Other">Other point</param>
            <returns>Distance</returns>
        </member>
        <member name="P:PdfFileWriter.PointD.X">
            <summary>
            Gets or sets X
            </summary>
        </member>
        <member name="P:PdfFileWriter.PointD.Y">
            <summary>
            Gets or sets Y
            </summary>
        </member>
        <member name="T:PdfFileWriter.SizeD">
            <summary>
            Size in double precision class
            </summary>
        </member>
        <member name="M:PdfFileWriter.SizeD.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PdfFileWriter.SizeD.#ctor(System.Double,System.Double)">
            <summary>
            SizeD constructor
            </summary>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
        </member>
        <member name="P:PdfFileWriter.SizeD.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:PdfFileWriter.SizeD.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="T:PdfFileWriter.LineD">
            <summary>
            Line in double precision class
            </summary>
        </member>
        <member name="M:PdfFileWriter.LineD.#ctor(PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            LineD constructor (two points)
            </summary>
            <param name="P1">Point 1</param>
            <param name="P2">Point 2</param>
        </member>
        <member name="M:PdfFileWriter.LineD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            LineD constructor (coordinates)
            </summary>
            <param name="X1">Point1 X</param>
            <param name="Y1">Point1 Y</param>
            <param name="X2">Point2 X</param>
            <param name="Y2">Point2 Y</param>
        </member>
        <member name="P:PdfFileWriter.LineD.P1">
            <summary>
            Gets or sets point 1
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.P2">
            <summary>
            Gets or sets point 2
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.DX">
            <summary>
            Delta X
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.DY">
            <summary>
            Delta Y
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.DXY">
            <summary>
            Delta XY
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.Length">
            <summary>
            Line length
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.Alpha">
            <summary>
            Line slope in radians
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.AlphaDeg">
            <summary>
            Line slope in degrees
            </summary>
        </member>
        <member name="T:PdfFileWriter.BezierD">
            <summary>
            Bezier curve class
            </summary>
            <remarks>
            All dimensions are in double precision.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.BezierD.CircleFactor">
            <summary>
            Circle factor
            </summary>
            <remarks>The circle factor makes Bezier curve to look like a circle.</remarks>
        </member>
        <member name="M:PdfFileWriter.BezierD.#ctor(PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Bezier constructor
            </summary>
            <param name="P1">P1</param>
            <param name="P2">P2</param>
            <param name="P3">P3</param>
            <param name="P4">P4</param>
        </member>
        <member name="M:PdfFileWriter.BezierD.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Bezier constructor
            </summary>
            <param name="X1">P1-X</param>
            <param name="Y1">P1-Y</param>
            <param name="X2">P2-X</param>
            <param name="Y2">P2-Y</param>
            <param name="X3">P3-X</param>
            <param name="Y3">P3-Y</param>
            <param name="X4">P4-X</param>
            <param name="Y4">P4-Y</param>
        </member>
        <member name="M:PdfFileWriter.BezierD.#ctor(PdfFileWriter.PointD,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PointD)">
            <summary>
            Bezier constructor
            </summary>
            <param name="P1">P1</param>
            <param name="Factor2">Factor2</param>
            <param name="Alpha2">Alpha2</param>
            <param name="Factor3">Factor3</param>
            <param name="Alpha3">Alpha3</param>
            <param name="P4">P4</param>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleFirstQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier first quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleSecondQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier second quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleThirdQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier third quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleFourthQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier fourth quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalFirstQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval first quarter
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalSecondQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval second quarter
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalThirdQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval third quarter
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalFourthQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval fourth quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="P:PdfFileWriter.BezierD.P1">
            <summary>
            Bezier P1
            </summary>
        </member>
        <member name="P:PdfFileWriter.BezierD.P2">
            <summary>
            Bezier P2
            </summary>
        </member>
        <member name="P:PdfFileWriter.BezierD.P3">
            <summary>
            Bezier P3
            </summary>
        </member>
        <member name="P:PdfFileWriter.BezierD.P4">
            <summary>
            Bezier P4
            </summary>
        </member>
        <member name="T:PdfFileWriter.ImageSizePos">
            <summary>
            Image size and position class
            </summary>
            <remarks>
            Delta X and Y are the adjustments to image position to
            meet the content alignment request.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.ImageSizePos.ImageArea(System.Int32,System.Int32,PdfFileWriter.PdfRectangle,System.Drawing.ContentAlignment)">
            <summary>
            Adjust image drawing area for both aspect ratio and content alignment
            </summary>
            <param name="ImageWidthPix">Image width in pixels.</param>
            <param name="ImageHeightPix">Image height in pixels.</param>
            <param name="DrawArea">Drawing area rectangle</param>
            <param name="Alignment">Content alignment.</param>
            <returns>Adjusted drawing area rectangle</returns>
        </member>
        <member name="M:PdfFileWriter.ImageSizePos.ImageArea(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Drawing.ContentAlignment)">
            <summary>
            Adjust image drawing area for both aspect ratio and content alignment
            </summary>
            <param name="ImageWidthPix">Image width in pixels.</param>
            <param name="ImageHeightPix">Image height in pixels.</param>
            <param name="DrawAreaLeft">Drawing area left side.</param>
            <param name="DrawAreaBottom">Drawing area bottom side.</param>
            <param name="DrawAreaWidth">Drawing area width.</param>
            <param name="DrawAreaHeight">Drawing area height.</param>
            <param name="Alignment">Content alignment.</param>
            <returns>Adjusted drawing area rectangle</returns>
        </member>
        <member name="M:PdfFileWriter.ImageSizePos.ImageSize(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculate best fit to preserve aspect ratio
            </summary>
            <param name="ImageWidthPix">Image width in pixels.</param>
            <param name="ImageHeightPix">Image height in pixels.</param>
            <param name="DrawAreaWidth">Drawing area width.</param>
            <param name="DrawAreaHeight">Drawing area height.</param>
            <returns>Image size in user units.</returns>
        </member>
        <member name="T:PdfFileWriter.PdfAxialShading">
            <summary>
            PDF axial shading resource class
            </summary>
            <remarks>
            Derived class from PdfObject
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfAxialShading.#ctor(PdfFileWriter.PdfDocument,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PdfShadingFunction)">
            <summary>
            PDF axial shading constructor.
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <param name="ShadingFunction">Shading function</param>
        </member>
        <member name="M:PdfFileWriter.PdfAxialShading.SetAxis(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set Axis direction
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
        </member>
        <member name="M:PdfFileWriter.PdfAxialShading.AntiAlias(System.Boolean)">
            <summary>
            Sets anti-alias parameter
            </summary>
            <param name="Value">Anti-alias true or false</param>
        </member>
        <member name="M:PdfFileWriter.PdfAxialShading.ExtendShading(System.Boolean,System.Boolean)">
            <summary>
            Extend shading beyond axis
            </summary>
            <param name="Before">Before (true or false)</param>
            <param name="After">After (true or false)</param>
        </member>
        <member name="T:PdfFileWriter.FontSizeUnit">
            <summary>
            Font size units for PdfChart.CreateFont method enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.FontSizeUnit.Pixel">
            <summary>
            Pixel
            </summary>
        </member>
        <member name="F:PdfFileWriter.FontSizeUnit.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:PdfFileWriter.FontSizeUnit.UserUnit">
            <summary>
            PDF document user unit
            </summary>
        </member>
        <member name="F:PdfFileWriter.FontSizeUnit.Inch">
            <summary>
            Inch
            </summary>
        </member>
        <member name="F:PdfFileWriter.FontSizeUnit.cm">
            <summary>
            CM
            </summary>
        </member>
        <member name="F:PdfFileWriter.FontSizeUnit.mm">
            <summary>
            MM
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfChart">
            <summary>
            PDF chart resource class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#ChartingSupport">2.10 Charting Support</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawChart">For example of drawing image see 3.11. Draw Pie Chart</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfChart.#ctor(PdfFileWriter.PdfDocument,System.Windows.Forms.DataVisualization.Charting.Chart,System.Double)">
            <summary>
            PDF chart constructor
            </summary>
            <param name="Document">Document object parent of this chart.</param>
            <param name="Chart">.NET Chart object.</param>
            <param name="Resolution">Resolution in pixels per inch (optional argument)</param>
        </member>
        <member name="M:PdfFileWriter.PdfChart.SaveToPdfFile(System.Boolean)">
            <summary>
            Save chart to PDF output file
            </summary>
            <param name="DisposeChart">Dispose .NET chart object (see remarks.)</param>
            <remarks>
            <para>
            Call this method after chart is fully constructed.
            Calling this method flush the resource to the output file.
            It reduces the unmanaged memory requirements.
            If method is not called, the resource will be sent to the
            output file when Document.CreateFile() method is called.
            </para>
            <para>
            If DisposeChart is true (by default it is true), this method
            will call .NET Chart.Dispose() method to free unmanaged
            resources. If DisposeChart is false, it is the responsibility
            of the caller to free the resources.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfChart.CreateChart(PdfFileWriter.PdfDocument,System.Double,System.Double,System.Double)">
            <summary>
            Static method to create .NET Chart object.
            </summary>
            <param name="Document">Current document object.</param>
            <param name="Width">Chart width in user units.</param>
            <param name="Height">Chart height in user units.</param>
            <param name="Resolution">Resolution in pixels per inch (optional argument).</param>
            <returns>.NET Chart object</returns>
            <remarks>
            The returned chart has the correct width and height in pixels.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfChart.CreateFont(System.String,System.Drawing.FontStyle,System.Double,PdfFileWriter.FontSizeUnit)">
            <summary>
            Helper method to create a font for chart drawing.
            </summary>
            <param name="FontFamilyName">Font family name.</param>
            <param name="FontStyle">Font style.</param>
            <param name="FontSize">Font size per unit argument.</param>
            <param name="Unit">Font size unit.</param>
            <returns>.NET font</returns>
        </member>
        <member name="M:PdfFileWriter.PdfChart.ImageSize(PdfFileWriter.SizeD)">
            <summary>
            Calculates chart size to preserve aspect ratio.
            </summary>
            <param name="InputSize">Chart display area.</param>
            <returns>Adjusted chart display area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfChart.ImageSize(System.Double,System.Double)">
            <summary>
            Calculates chart size to preserve aspect ratio.
            </summary>
            <param name="Width">Chart display width.</param>
            <param name="Height">Chart display height.</param>
            <returns>Adjusted chart display area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfChart.ImageSizePosition(PdfFileWriter.SizeD,System.Drawing.ContentAlignment)">
            <summary>
            Calculates chart size to preserve aspect ratio and sets position.
            </summary>
            <param name="InputSize">Chart display area</param>
            <param name="Alignment">Content alignment</param>
            <returns>Adjusted chart size and position within area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio and adjust
            position according to content alignment argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfChart.ImageSizePosition(System.Double,System.Double,System.Drawing.ContentAlignment)">
            <summary>
            Calculates chart size to preserve aspect ratio and sets position.
            </summary>
            <param name="Width">Chart display width.</param>
            <param name="Height">Chart display height.</param>
            <param name="Alignment">Content alignment</param>
            <returns>Adjusted chart size and position within area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio and adjust
            position according to content alignment argument.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfChart.Chart">
            <summary>
            Chart object (.NET).
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfChart.Width">
            <summary>
            Chart width in user units.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfChart.Height">
            <summary>
            Chart height in user units.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfChart.Resolution">
            <summary>
            Chart resolution in pixels per inch.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfChart.WidthPix">
            <summary>
            Chart width in pixels.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfChart.HeightPix">
            <summary>
            Chart height in pixels.
            </summary>
        </member>
        <member name="T:PdfFileWriter.DrawStyle">
            <summary>
            PDF font style flags enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Underline">
            <summary>
            Underline
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Strikeout">
            <summary>
            Strikeout
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Subscript">
            <summary>
            Subscript
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Superscript">
            <summary>
            Superscript
            </summary>
        </member>
        <member name="T:PdfFileWriter.PaintOp">
            <summary>
            Path painting and clipping operators enumeration
            </summary>
            <remarks>
            <para>
            Note Special path paining considerations in section 4.4
            of the PDF specifications. EOR is even odd rule. Otherwise
            it is nonzero winding number rule.
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PaintOp.NoOperator">
            <summary>
            No operator
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.NoPaint">
            <summary>
            No paint
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.Stroke">
            <summary>
            Stoke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.CloseStroke">
            <summary>
            Close and stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.Fill">
            <summary>
            Fill
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.FillEor">
            <summary>
            Fill EOR
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.FillStroke">
            <summary>
            Fill and stoke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.FillStrokeEor">
            <summary>
            Fill and stroke EOR
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.CloseFillStroke">
            <summary>
            Close, Fill and stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.CloseFillStrokeEor">
            <summary>
            Close, Fill and Stroke EOR
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.ClipPathWnr">
            <summary>
            Clip path
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.ClipPathEor">
            <summary>
            Clip path EOR
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfLineCap">
            <summary>
            PDF line cap enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineCap.Butt">
            <summary>
            Butt
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineCap.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineCap.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfLineJoin">
            <summary>
            PDF line join enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineJoin.Miter">
            <summary>
            Miter
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineJoin.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineJoin.Bevel">
            <summary>
            Bevel
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextRendering">
            <summary>
            Text rendering enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Fill">
            <summary>
            Fill
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Stroke">
            <summary>
            Stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.FillStroke">
            <summary>
            Fill and stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Invisible">
            <summary>
            Invisible
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.FillClip">
            <summary>
            Fill and clip
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.StrokeClip">
            <summary>
            Stroke and clip
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.FillStrokeClip">
            <summary>
            Fill, stroke and clip
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Clip">
            <summary>
            Clip
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextJustify">
            <summary>
            Text justify enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextJustify.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextJustify.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextJustify.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextBoxJustify">
            <summary>
            TextBox justify enumeration
            </summary>
            <remarks>The first three must be the same as TextJustify
            </remarks>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.FitToWidth">
            <summary>
            Fit to width
            </summary>
        </member>
        <member name="T:PdfFileWriter.BezierPointOne">
            <summary>
            Draw Bezier point one control enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.BezierPointOne.Ignore">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="F:PdfFileWriter.BezierPointOne.MoveTo">
            <summary>
            Move to
            </summary>
        </member>
        <member name="F:PdfFileWriter.BezierPointOne.LineTo">
            <summary>
            Line to
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfContents">
            <summary>
            PDF contents class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#CoordinateSystem">2.1 Coordinate System</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.#ctor(PdfFileWriter.PdfPage)">
            <summary>
            PdfContents constructor for page contents
            </summary>
            <param name="Page">Page parent</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            PdfContents constructor unattached
            </summary>
            <param name="Document">Current PdfDocument</param>
            <remarks>
            This contents object must be explicitly attached to a page object
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SaveGraphicsState">
            <summary>
            Save graphics state
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.RestoreGraphicsState">
            <summary>
            Restore graphics state
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.PaintOpStr(PdfFileWriter.PaintOp)">
            <summary>
            Convert PaintOp enumeration to String
            </summary>
            <param name="PP">Paint operator</param>
            <returns>Paint operator string</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetPaintOp(PdfFileWriter.PaintOp)">
            <summary>
            Set paint operator
            </summary>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetLineWidth(System.Double)">
            <summary>
            Set line width
            </summary>
            <param name="Width">Line width</param>
            <remarks>
            Set line width for future path operations
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetLineCap(PdfFileWriter.PdfLineCap)">
            <summary>
            Set line cap
            </summary>
            <param name="LineCap">Line cap enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetLineJoin(PdfFileWriter.PdfLineJoin)">
            <summary>
            Set line join
            </summary>
            <param name="LineJoin">Set line join enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetMiterLimit(System.Double)">
            <summary>
            Set miter limit
            </summary>
            <param name="MiterLimit">Miter limit</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetDashLine(System.Double[],System.Double)">
            <summary>
            Set dash line pattern
            </summary>
            <param name="DashArray">Dash array (must be even)</param>
            <param name="DashPhase">Dash phase</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.GrayLevelNonStroking(System.Double)">
            <summary>
            Set gray level for non stroking (fill) operations
            </summary>
            <param name="GrayLevel">Gray level (0.0 to 1.0)</param>
            <remarks>
            Gray level must be 0.0 (black) to 1.0 (white).
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.GrayLevelStroking(System.Double)">
            <summary>
            Set gray level for stroking (outline) operations
            </summary>
            <param name="GrayLevel">Gray level (0.0 to 1.0)</param>
            <remarks>
            Gray level must be 0.0 (black) to 1.0 (white).
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetColorNonStroking(System.Drawing.Color)">
            <summary>
            Set color for non stroking (fill) operations
            </summary>
            <param name="Paint">Color</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetColorStroking(System.Drawing.Color)">
            <summary>
            Set color for stroking (outline) operations
            </summary>
            <param name="Paint">Color</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetPatternNonStroking(PdfFileWriter.PdfTilingPattern)">
            <summary>
            Set pattern for non stroking (fill) operations
            </summary>
            <param name="Pattern">Pattern resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetPatternStroking(PdfFileWriter.PdfContents)">
            <summary>
            Set pattern for stroking (outline) operations
            </summary>
            <param name="Pattern">Pattern resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawShading(PdfFileWriter.PdfAxialShading)">
            <summary>
            Draw axial shading pattern
            </summary>
            <param name="Shading">Axial shading resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawShading(PdfFileWriter.PdfRadialShading)">
            <summary>
            Draw radial shading pattern
            </summary>
            <param name="Shading">Radial shading resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetTransMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set current transformation matrix
            </summary>
            <param name="a">A</param>
            <param name="b">B</param>
            <param name="c">C</param>
            <param name="d">D</param>
            <param name="e">E</param>
            <param name="f">F</param>
            <remarks>
            Xpage = a * Xuser + c * Yuser + e
            Ypage = b * Xuser + d * Yuser + f
            </remarks>	
        </member>
        <member name="M:PdfFileWriter.PdfContents.Translate(PdfFileWriter.PointD)">
            <summary>
            Translate origin
            </summary>
            <param name="Orig">New origin</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.Translate(System.Double,System.Double)">
            <summary>
            Translate origin
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.Scale(System.Double)">
            <summary>
            Scale
            </summary>
            <param name="Scale">New scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(PdfFileWriter.PointD,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="Orig">Origin point</param>
            <param name="Scale">Scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(System.Double,System.Double,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Scale">Scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(PdfFileWriter.PointD,System.Double,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="Orig">Origin point</param>
            <param name="ScaleX">Horizontal scale</param>
            <param name="ScaleY">Vertical scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale</param>
            <param name="ScaleY">Vertical scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScaleRotate(PdfFileWriter.PointD,System.Double,System.Double)">
            <summary>
            Translate, scale and rotate
            </summary>
            <param name="Orig">Origin point</param>
            <param name="Scale">Scale</param>
            <param name="Rotate">Rotate (radians)</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScaleRotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Translate, scale and rotate
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Scale">Scale</param>
            <param name="Rotate">Rotate (radians)</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScaleRotate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Translate, scale and rotate
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale</param>
            <param name="ScaleY">Vertical scale</param>
            <param name="Rotate">Rotate (radians)</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.MoveTo(PdfFileWriter.PointD)">
            <summary>
            Move current pointer to new position
            </summary>
            <param name="Point">New point</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.MoveTo(System.Double,System.Double)">
            <summary>
            Move current pointer to new position
            </summary>
            <param name="X">New X position</param>
            <param name="Y">New Y position</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.LineTo(PdfFileWriter.PointD)">
            <summary>
            Draw line from last position to new position
            </summary>
            <param name="Point">New point</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.LineTo(System.Double,System.Double)">
            <summary>
            Draw line from last position to new position
            </summary>
            <param name="X">New X position</param>
            <param name="Y">New Y position</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezier(PdfFileWriter.BezierD,PdfFileWriter.BezierPointOne)">
            <summary>
            Draw Bezier cubic path
            </summary>
            <param name="Bezier">Bezier object</param>
            <param name="Point1">Point1 enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezier(PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Draw Bezier cubic path
            </summary>
            <param name="P1">Point 1</param>
            <param name="P2">Point 2</param>
            <param name="P3">Point 3</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw Bezier cubic path
            </summary>
            <param name="X1">Point 1 X</param>
            <param name="Y1">Point 1 Y</param>
            <param name="X2">Point 2 X</param>
            <param name="Y2">Point 2 Y</param>
            <param name="X3">Point 3 X</param>
            <param name="Y3">Point 3 Y</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezierNoP1(PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Draw Bezier cubic path (P1 is the same as current point)
            </summary>
            <param name="P2">Point 2</param>
            <param name="P3">Point 3</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezierNoP1(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw Bezier cubic path (P1 is the same as current point)
            </summary>
            <param name="X2">Point 2 X</param>
            <param name="Y2">Point 2 Y</param>
            <param name="X3">Point 3 X</param>
            <param name="Y3">Point 3 Y</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezierNoP2(PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Draw Bezier cubic path (P2 is the same as P3)
            </summary>
            <param name="P1">Point 1</param>
            <param name="P3">Point 3</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezierNoP2(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw Bezier cubic path (P2 is the same as P3)
            </summary>
            <param name="X1">Point 1 X</param>
            <param name="Y1">Point 1 Y</param>
            <param name="X3">Point 3 X</param>
            <param name="Y3">Point 3 Y</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(PdfFileWriter.LineD)">
            <summary>
            Draw line
            </summary>
            <param name="Line">Line object</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Draw line
            </summary>
            <param name="P1">Point 1</param>
            <param name="P2">Point 2</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw line
            </summary>
            <param name="X1">Point 1 X</param>
            <param name="Y1">Point 1 Y</param>
            <param name="X2">Point 2 X</param>
            <param name="Y2">Point 2 X</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(PdfFileWriter.LineD,System.Double)">
            <summary>
            Draw line with given line width
            </summary>
            <param name="Line">Line</param>
            <param name="LineWidth">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(PdfFileWriter.PointD,PdfFileWriter.PointD,System.Double)">
            <summary>
            Draw line with given line width
            </summary>
            <param name="P1">Point 1</param>
            <param name="P2">Point 2</param>
            <param name="LineWidth">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw line with given line width
            </summary>
            <param name="X1">Point 1 X</param>
            <param name="Y1">Point 1 Y</param>
            <param name="X2">Point 2 X</param>
            <param name="Y2">Point 2 X</param>
            <param name="LineWidth">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRectangle(PdfFileWriter.PointD,PdfFileWriter.SizeD,PdfFileWriter.PaintOp)">
            <summary>
            Draw rectangle
            </summary>
            <param name="Origin">Origin (left-bottom)</param>
            <param name="Size">Size</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRectangle(System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw Rectangle
            </summary>
            <param name="OriginX">Origin X (left)</param>
            <param name="OriginY">Origin Y (bottom)</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawOval(PdfFileWriter.PointD,PdfFileWriter.SizeD,PdfFileWriter.PaintOp)">
            <summary>
            Draw oval
            </summary>
            <param name="Origin">Origin (left-bottom)</param>
            <param name="Size">Size</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawOval(System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw oval
            </summary>
            <param name="OriginX">Origin X (left)</param>
            <param name="OriginY">Origin Y (bottom)</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawHeart(PdfFileWriter.LineD,PdfFileWriter.PaintOp)">
            <summary>
            Draw heart
            </summary>
            <param name="CenterLine">Center line</param>
            <param name="PP">Paint operator</param>
            <remarks>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawHeart">For example of drawing heart see 3.10. Draw Heart</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawHeart(System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw heart
            </summary>
            <param name="CenterLineTopX">Center line top X</param>
            <param name="CenterLineTopY">Center line top Y</param>
            <param name="CenterLineBottomX">Center line bottom X</param>
            <param name="CenterLineBottomY">Center line bottom Y</param>
            <param name="PP">Paint operator</param>
            <remarks>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawHeart">For example of drawing heart see 3.10. Draw Heart</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawDoubleBezierPath(PdfFileWriter.LineD,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw double Bezier path
            </summary>
            <param name="CenterLine">Center line</param>
            <param name="Factor1">Factor 1</param>
            <param name="Alpha1">Alpha 1</param>
            <param name="Factor2">Factor 2</param>
            <param name="Alpha2">Alpha 2</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRoundedRectangle(PdfFileWriter.PointD,PdfFileWriter.SizeD,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw Rounded Rectangle
            </summary>
            <param name="Origin">Origin (left-bottom)</param>
            <param name="Size">Size</param>
            <param name="Radius">Radius</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw Rounded Rectangle
            </summary>
            <param name="OriginX">Origin X (left)</param>
            <param name="OriginY">Origin Y (right)</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <param name="Radius">Radius</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawInwardCornerRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw Rectangle with Inward Corners
            </summary>
            <param name="OriginX">Origin X (left)</param>
            <param name="OriginY">Origin Y (right)</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <param name="Radius">Radius</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawPolygon(System.Drawing.PointF[],PdfFileWriter.PaintOp)">
            <summary>
            Draw polygon
            </summary>
            <param name="PathArray">Path array (min 2 points)</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawPolygon(System.Single[],PdfFileWriter.PaintOp)">
            <summary>
            Draw polygon
            </summary>
            <param name="PathArray">Path array of X and Y values (min 4 and even)</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRegularPolygon(System.Double,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw regular polygon
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRegularPolygon(PdfFileWriter.PointD,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw regular polygon
            </summary>
            <param name="Center">Center position</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(System.Double,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(PdfFileWriter.PointD,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="Center">Center position</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius1">Radius 1</param>
            <param name="Radius2">Radius 2</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(PdfFileWriter.PointD,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="Center">Center point</param>
            <param name="Radius1">Radius 1</param>
            <param name="Radius2">Radius 2</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.BeginTextMode">
            <summary>
            Begin text mode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.EndTextMode">
            <summary>
            End text mode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetTextPosition(System.Double,System.Double)">
            <summary>
            Set text position
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetTextRenderingMode(PdfFileWriter.TextRendering)">
            <summary>
            Set text rendering mode
            </summary>
            <param name="TR">Text rendering mode enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetCharacterSpacing(System.Double)">
            <summary>
            Set character extra spacing
            </summary>
            <param name="ExtraSpacing">Character extra spacing</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetWordSpacing(System.Double)">
            <summary>
            Set word extra spacing
            </summary>
            <param name="Spacing">Word extra spacing</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.ReverseString(System.String)">
            <summary>
            Reverse characters in a string
            </summary>
            <param name="Text">Input string</param>
            <returns>Output string</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.String)">
            <summary>
            Draw text
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
            <remarks>
            This method must be used together with BeginTextMode,
            EndTextMode and SetTextPosition.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Draw one line of text left justified
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,PdfFileWriter.TextJustify,System.String)">
            <summary>
            Draw one line of text
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Justify">Text justify enumeration</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,PdfFileWriter.DrawStyle,System.String)">
            <summary>
            Draw one line of text width draw style
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="DrawStyle">Drawing style enumeration</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,System.Drawing.Color,System.String)">
            <summary>
            Draw one line of text with a given color
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="TextColor">Color</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,PdfFileWriter.TextJustify,PdfFileWriter.DrawStyle,System.Drawing.Color,System.String)">
            <summary>
            Draw one line of text with text justification, drawing style and color
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Justify">Text justify enumeration</param>
            <param name="DrawStyle">Drawing style enumeration</param>
            <param name="TextColor">Color</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,PdfFileWriter.KerningAdjust[])">
            <summary>
            Draw text with kerning array
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="KerningArray">Kerning array</param>
            <returns>Text width</returns>
            <remarks>
            Each kerning item consists of text and position adjustment.
            The adjustment is a negative number.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawTextWithKerning(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Draw text with kerning
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,PdfFileWriter.TextJustify,System.Double,System.Drawing.Color,System.Drawing.Color,System.String)">
            <summary>
            Draw text with special effects
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Justify">Text justify enumeration</param>
            <param name="OutlineWidth">Outline width</param>
            <param name="StrokingColor">Stoking (outline) color</param>
            <param name="NonStokingColor">Non stroking (fill) color</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawWebLink(PdfFileWriter.PdfPage,PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Draw web link with one line of text
            </summary>
            <param name="Page">Current page</param>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="TextAbsPosX">Text absolute position X</param>
            <param name="TextAbsPosY">Text absolute position Y</param>
            <param name="Text">Text</param>
            <param name="WebLink">Web link</param>
            <returns>Text width</returns>
            <remarks>
            The position arguments are in relation to the
            bottom left corner of the paper.
            Text will be drawn left justified, underlined and in dark blue.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawWebLink(PdfFileWriter.PdfPage,PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,PdfFileWriter.TextJustify,PdfFileWriter.DrawStyle,System.Drawing.Color,System.String,System.String)">
            <summary>
            Draw web link with one line of text
            </summary>
            <param name="Page">Current page</param>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="TextAbsPosX">Text absolute position X</param>
            <param name="TextAbsPosY">Text absolute position Y</param>
            <param name="Justify">Text justify enumeration.</param>
            <param name="DrawStyle">Draw style enumeration</param>
            <param name="TextColor">Color</param>
            <param name="Text">Text</param>
            <param name="WebLink">Web link</param>
            <returns>Text width</returns>
            <remarks>
            The position arguments are in relation to the
            bottom left corner of the paper.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(System.Double,System.Double@,System.Double,System.Int32,PdfFileWriter.TextBox,PdfFileWriter.PdfPage)">
            <summary>
            Draw TextBox
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosYTop">Position Y (by reference)</param>
            <param name="PosYBottom">Position Y bottom</param>
            <param name="LineNo">Start at line number</param>
            <param name="TextBox">TextBox</param>
            <param name="Page">Page if TextBox contains web link segment</param>
            <returns>Next line number</returns>
            <remarks>
            Before calling this method you must add text to a TextBox object.
            <para>
            Set the PosX and PosYTop to the left top corner of the text area.
            Note PosYTop is by reference. This variable will be updated to
            the next vertical line position after the method was executed.
            </para>
            <para>
            Set the PosYBottom to the bottom of your page. The method will
            not print below this value.
            </para>
            <para>
            Set the LineNo to the first line to be printed. Initially 
            this will be zero. After the method returns, PosYTop is set 
            to next print line on the page and LineNo is set to next line 
            within the box.
            </para>
            <para>
            If LineNo is equals to TextBox.LineCount the box was fully printed. 
            </para>
            <para>
            If LineNo is less than TextBox.LineCount box printing was not
            done. Start a new PdfPage and associated PdfContents. Set 
            PosYTop to desired start position. Set LineNo to the value
            returned by this method, and call the method again.
            </para>
            <para>
            If your TextBox contains WebLink segment you must supply
            Page argument and position X and Y must be relative to
            page bottom left corner.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(System.Double,System.Double@,System.Double,System.Int32,System.Double,System.Double,PdfFileWriter.TextBoxJustify,PdfFileWriter.TextBox,PdfFileWriter.PdfPage)">
            <summary>
            Draw TextBox
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosYTop">Position Y (by reference)</param>
            <param name="PosYBottom">Position Y bottom</param>
            <param name="LineNo">Start at line number</param>
            <param name="LineExtraSpace">Extra line spacing</param>
            <param name="ParagraphExtraSpace">Extra paragraph spacing</param>
            <param name="Justify">TextBox justify enumeration</param>
            <param name="TextBox">TextBox</param>
            <param name="Page">Page if TextBox contains web link segment</param>
            <returns>Next line number</returns>
            <remarks>
            Before calling this method you must add text to a TextBox object.
            <para>
            Set the PosX and PosYTop to the left top corner of the text area.
            Note PosYTop is by reference. This variable will be updated to
            the next vertical line position after the method was executed.
            </para>
            <para>
            Set the PosYBottom to the bottom of your page. The method will
            not print below this value.
            </para>
            <para>
            Set the LineNo to the first line to be printed. Initially 
            this will be zero. After the method returns, PosYTop is set 
            to next print line on the page and LineNo is set to next line 
            within the box.
            </para>
            <para>
            If LineNo is equals to TextBox.LineCount the box was fully printed. 
            </para>
            <para>
            If LineNo is less than TextBox.LineCount box printing was not
            done. Start a new PdfPage and associated PdfContents. Set 
            PosYTop to desired start position. Set LineNo to the value
            returned by this method, and call the method again.
            </para>
            <para>
            If your TextBox contains WebLink segment you must supply
            Page argument and position X and Y must be relative to
            page bottom left corner.
            </para>
            <para>
            TextBoxJustify controls horizontal justification. FitToWidth
            will display a straight right edge.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.ClipText(PdfFileWriter.PdfFont,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Clip text exposing area underneath
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Text">Text</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBarcode(System.Double,System.Double,System.Double,System.Double,PdfFileWriter.Barcode,PdfFileWriter.PdfFont,System.Double)">
            <summary>
            Draw barcode
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="BarWidth">Narrow bar width</param>
            <param name="BarHeight">Barcode height</param>
            <param name="Barcode">Derived barcode class</param>
            <param name="TextFont">Optional text font</param>
            <param name="FontSize">Optional text font size</param>
            <returns>Barcode width</returns>
            <remarks>
            <para>
            PosX can be the left, centre or right side of the barcode.
            The Justify argument controls the meaning of PosX.
            PosY is the position of the bottom side of the barcode. 
            If optional text is displayed it will be
            displayed below PosY. If optional text is wider than the
            barcode it will be extended to the left and right sides
            of the barcode.
            </para>
            <para>
            The BarWidth argument is the width of the narrow bar.
            </para>
            <para>
            The BarcodeHeight argument is the height of the barcode 
            excluding optional text.
            </para>
            <para>
            Set Barcode to one of the derived classes. 
            This library supports: Barcode128, Barcode39 and BarcodeEAN13.
            Note BarcodeEAN13 supports Barcode UPC-A.
            </para>
            <para>
            Barcode text is optional. If TextFont and FontSize are omitted 
            no text will be drawn under the barcode. If TextFont and
            FontSize are specified the barcode text will be displayed
            under the barcode. It will be horizontally centered in relation
            to the barcode.
            </para>
            <para>
            Barcode text is displayed below PosY. Make sure to leave
            space under the barcode.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBarcode(System.Double,System.Double,PdfFileWriter.TextJustify,System.Double,System.Double,PdfFileWriter.Barcode,PdfFileWriter.PdfFont,System.Double)">
            <summary>
            Draw barcode
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Justify">Barcode justify (using TextJustify enumeration)</param>
            <param name="BarWidth">Narrow bar width</param>
            <param name="BarcodeHeight">Barcode height</param>
            <param name="Barcode">Derived barcode class</param>
            <param name="TextFont">Text font</param>
            <param name="FontSize">Text font size</param>
            <returns>Barcode width</returns>
            <remarks>
            <para>
            PosX can be the left, centre or right side of the barcode.
            The Justify argument controls the meaning of PosX.
            PosY is the position of the bottom side of the barcode. 
            If optional text is displayed it will be
            displayed below PosY. If optional text is wider than the
            barcode it will be extended to the left and right sides
            of the barcode.
            </para>
            <para>
            The BarWidth argument is the width of the narrow bar.
            </para>
            <para>
            The BarcodeHeight argument is the height of the barcode 
            excluding optional text.
            </para>
            <para>
            Set Barcode to one of the derived classes. 
            This library supports: Barcode128, Barcode39 and BarcodeEAN13.
            Note BarcodeEAN13 supports Barcode UPC-A.
            </para>
            <para>
            Barcode text is optional. If TextFont and FontSize are omitted 
            no text will be drawn under the barcode. If TextFont and
            FontSize are specified the barcode text will be displayed
            under the barcode. It will be horizontally centered in relation
            to the barcode.
            </para>
            <para>
            Barcode text is displayed below PosY. Make sure to leave
            space under the barcode.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBarcode(System.Double,System.Double,PdfFileWriter.TextJustify,System.Double,System.Double,System.Drawing.Color,PdfFileWriter.Barcode,PdfFileWriter.PdfFont,System.Double)">
            <summary>
            Draw barcode
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Justify">Barcode justify (using TextJustify enumeration)</param>
            <param name="BarWidth">Narrow bar width</param>
            <param name="BarHeight">Barcode height</param>
            <param name="BarColor">Barcode color</param>
            <param name="Barcode">Derived barcode class</param>
            <param name="TextFont">Text font</param>
            <param name="FontSize">Text font size</param>
            <returns>Barcode width</returns>
            <remarks>
            <para>
            PosX can be the left, centre or right side of the barcode.
            The Justify argument controls the meaning of PosX.
            PosY is the position of the bottom side of the barcode. 
            If optional text is displayed it will be
            displayed below PosY. If optional text is wider than the
            barcode it will be extended to the left and right sides
            of the barcode.
            </para>
            <para>
            The BarWidth argument is the width of the narrow bar.
            </para>
            <para>
            The BarcodeHeight argument is the height of the barcode 
            excluding optional text.
            </para>
            <para>
            Set Barcode to one of the derived classes. 
            This library supports: Barcode128, Barcode39 and BarcodeEAN13.
            Note BarcodeEAN13 supports Barcode UPC-A.
            </para>
            <para>
            Barcode text is optional. If TextFont and FontSize are omitted 
            no text will be drawn under the barcode. If TextFont and
            FontSize are specified the barcode text will be displayed
            under the barcode. It will be horizontally centered in relation
            to the barcode.
            </para>
            <para>
            Barcode text is displayed below PosY. Make sure to leave
            space under the barcode.
            </para>
            <para>
            If color other than black is given make sure there is
            a good contrast to white.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawImage(PdfFileWriter.PdfImage,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw image
            </summary>
            <param name="Image">PdfImage resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Width">Display width</param>
            <param name="Height">Display height</param>
            <remarks>
            The chart will be stretched or shrunk to fit the display width
            and display height. Use PdfImage.ImageSize(...) or 
            PdfImage.ImageSizePosition(...) to ensure correct aspect ratio 
            and positioning.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawChart(PdfFileWriter.PdfChart,System.Double,System.Double,System.Boolean)">
            <summary>
            Draw chart
            </summary>
            <param name="PdfChart">PdfChart resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="DisposeChart">Dispose chart</param>
            <remarks>
            <para>
            The chart is saved in the PDF document as an image.
            </para>
            <para>
            The PdfChart resource contains a .NET Chart class. The .NET
            Chart defines width and height in pixels and image resolution
            in pixels per inch. This method calculates the chart's display
            width and height based on these values.
            </para>
            <para>
            The .NET Chart member is defined by the user. It must be
            disposed in order to free unmanaged resources. If
            DisposeChart is true the DrawChart will call the Chart.Dispose()
            method. If the DisposeChart is false it is the responsibility
            of the calling method to dispose of the chart.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawChart(PdfFileWriter.PdfChart,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Draw chart
            </summary>
            <param name="PdfChart">PdfChart resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Width">Display width</param>
            <param name="Height">Display height</param>
            <param name="DisposeChart">Dispose chart</param>
            <remarks>
            <para>
            The chart is saved in the PDF document as an image.
            </para>
            <para>
            The PdfChart resource contains a .NET Chart class. The .NET
            Chart defines width and height in pixels and image resolution
            in pixels per inch.
            </para>
            <para>
            The chart will be stretched or shrunk to fit the display width
            and display height. Use PdfChart.ImageSize(...) or 
            PdfChart.ImageSizePosition(...) to ensure correct aspect ratio 
            and positioning.
            </para>
            <para>
            The .NET Chart member is defined by the user. It must be
            disposed in order to free unmanaged resources. If
            DisposeChart is true the DrawChart will call the Chart.Dispose()
            method. If the DisposeChart is false it is the responsibility
            of the calling method to dispose of the chart.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawQRCode(PdfFileWriter.PdfQRCode,System.Double,System.Double,System.Double)">
            <summary>
            Draw QR Code
            </summary>
            <param name="QRCode">QR Code resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Width">Display width and height</param>
            <remarks>
            <para>
            The QR Code is saved in the PDF document as an image.
            </para>
            <para>
            QR Code is a square. The display height is the same as the width. 
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <remarks>
            X object is displayed at current position. X object Size
            is as per X object.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject,System.Double,System.Double)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <remarks>
            X object Size is as per X object.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale factor</param>
            <param name="ScaleY">Vertical scale factor</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale factor</param>
            <param name="ScaleY">Vertical scale factor</param>
            <param name="Alpha">Rotation angle</param>
        </member>
        <member name="T:PdfFileWriter.UnitOfMeasure">
            <summary>
            Unit of measure enumeration
            </summary>
            <remarks>
            User unit of measure enumeration.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.Inch">
            <summary>
            Inch
            </summary>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.cm">
            <summary>
            CM
            </summary>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.mm">
            <summary>
            MM
            </summary>
        </member>
        <member name="T:PdfFileWriter.PaperType">
            <summary>
            Standard paper size enumeration 
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.Letter">
            <summary>
            Letter
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.Legal">
            <summary>
            Legal
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.A4">
            <summary>
            A4
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.A5">
            <summary>
            A5
            </summary>
        </member>
        <member name="T:PdfFileWriter.NFI">
            <summary>
            Number Format Information static class
            </summary>
            <remarks>
            Adobe readers expect decimal separator to be a period.
            Some countries define decimal separator as a comma.
            The project uses NFI.DecSep to force period for all regions.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.NFI.PeriodDecSep">
            <summary>
            Define period as number decimal separator.
            </summary>
            <remarks>
            NumberFormatInfo is used with string formatting to set the
            decimal separator to a period regardless of region.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfDocument">
            <summary>
            PDF document class
            </summary>
            <remarks>
            <para>
            The main class for controlling the production of the PDF document.
            </para>
            <para>
            Creating a PDF is a six steps process.
            </para>
            <para>
            Step 1: Create one document object this PdfDocument class.
            </para>
            <para>
            Step 2: Create resource objects such as fonts or images (i.e. PdfFont or PdfImage).
            </para>
            <para>
            Step 3: Create page object PdfPage.
            </para>
            <para>
            Step 4: Create contents object PdfContents.
            </para>
            <para>
            Step 5: Add text and graphics to the contents object (using PdfContents methods).
            </para>
            <para>
            Repeat steps 3, 4 and 5 for additional pages
            </para>
            <para>
            Step 6: Create your PDF document file by calling CreateFile method of PdfDocument.
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DocumentCreation">For example of document creation see 3.1. Document Creation Overview</a>
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfDocument.RevisionNumber">
            <summary>
            Library revision number
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDocument.RevisionDate">
            <summary>
            Library revision date
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDocument.Debug">
            <summary>
            Debug flag
            </summary>
            <remarks>
            Debug flag. Default is false. The program will generate normal PDF file.
            If debug flag is true, the library will not compress contents, will replace images and font file with text place holder.
            The generated file can be viewed with a text editor but cannot be loaded into PDF reader.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.String)">
            <summary>
            PDF document constructor.
            </summary>
            <param name="FileName">Document file name.</param>
            <remarks>
            This constructor generates a document with default letter size
            page (height 11”, width 8.5”). Page orientation is portrait.
            Unit of measure is points (1/72 inch). Scale factor is 1.0.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            PDF document constructor.
            </summary>
            <param name="Width">Page Width</param>
            <param name="Height">Page height</param>
            <param name="ScaleFactor">Scale factor</param>
            <param name="FileName">Document file name.</param>
            <remarks>
            This constructor generates a document with default page size
            as per Width and Height arguments. The ScaleFactor determines
            the user units of measure. It is the number of points in one
            user unit. For example, if user unit of measure is inch, the scale
            factor is 72.0. If height is greater than width the default page
            orientation is portrait. Otherwise it is landscape.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.Double,System.Double,PdfFileWriter.UnitOfMeasure,System.String)">
            <summary>
            PDF document constructor
            </summary>
            <param name="Width">Page width.</param>
            <param name="Height">Page height.</param>
            <param name="UnitOfMeasure">Unit of measure code.</param>
            <param name="FileName">Document file name.</param>
            <remarks>
            This constructor generates a document with default page size
            as per Width and Height arguments. The UnitOfMeasure code
            determines the ScaleFactor.	If height is greater than width 
            the default page orientation is portrait. Otherwise it is landscape.
            Unit of measure code is: Point, Inch, cm or mm.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(PdfFileWriter.PaperType,System.Boolean,PdfFileWriter.UnitOfMeasure,System.String)">
            <summary>
            PDF document constructor
            </summary>
            <param name="PaperType">Paper type</param>
            <param name="Landscape">True for landscape, false for portrait.</param>
            <param name="UnitOfMeasure">Unit of measure code.</param>
            <param name="FileName">Document file name.</param>
            <remarks>
            Page type is Letter, Legal or A4.
            Page orientation is portrait or landscape.
            Unit of measure is: Point, Inch, cm, mm.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption">
            <summary>
            Set encryption
            </summary>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using AES-128 encryption.
            The PDF reader will open the document without requesting
            a password. Permissions flags are set to allow all.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption(PdfFileWriter.Permission)">
            <summary>
            Set encryption
            </summary>
            <param name="Permissions">Permission flags.</param>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using AES-128 encryption.
            The PDF reader will open the document without requesting
            a password. Permissions will be set as per argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption(System.String,PdfFileWriter.Permission)">
            <summary>
            Set encryption
            </summary>
            <param name="UserPassword">User password</param>
            <param name="Permissions">Permission flags</param>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using AES-128 encryption.
            The PDF reader will open the document with user password.
            Permissions will be set as per argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption(System.String,System.String,PdfFileWriter.Permission)">
            <summary>
            Set encryption
            </summary>
            <param name="UserPassword">User password</param>
            <param name="OwnerPassword">Owner password</param>
            <param name="Permissions">Permission flags</param>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using AES-128 encryption.
            The PDF reader will accept either user or owner passwords.
            If owner password is used to open document, the PDF reader
            will open it with all permissions set to allow operation.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.GetBookmarksRoot">
            <summary>
            Gets bookmarks root
            </summary>
            <returns>Root bookmark object</returns>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.CreateFile">
            <summary>
            Create PDF document file
            </summary>
            <remarks>
            The last step of document creation after all pages were constructed.
            FileName is the path and name of the output file.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.Dispose">
            <summary>
            Dispose PDF document object
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDocument.ScaleFactor">
            <summary>
            Scale factor
            </summary>
            <remarks>
            From user unit of measure to points.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.Permission">
            <summary>
            PDF reader permission flags enumeration
            </summary>
            <remarks>
            PDF reference manual version 1.7 Table 3.20 
            </remarks>
        </member>
        <member name="F:PdfFileWriter.Permission.None">
            <summary>
            No permission flags
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.LowQalityPrint">
            <summary>
            Low quality print (bit 3)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.ModifyContents">
            <summary>
            Modify contents (bit 4)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.ExtractContents">
            <summary>
            Extract contents (bit 5)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Annotation">
            <summary>
            Annotation (bit 6)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Interactive">
            <summary>
            Interactive (bit 9)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Accessibility">
            <summary>
            Accessibility (bit 10)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.AssembleDoc">
            <summary>
            Assemble document (bit 11)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Print">
            <summary>
            Print (bit 12 plus bit 3)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.All">
            <summary>
            All permission bits
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfEncryption">
            <summary>
            PDF encryption class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#EncryptionSupport">2.6 Encryption Support</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfEncryption.Dispose">
            <summary>
            Dispose unmanaged resources
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfFontFlags">
            <summary>
            PDF font descriptor flags enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.FixedPitch">
            <summary>
            Fixed pitch font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Serif">
            <summary>
            Serif font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Symbolic">
            <summary>
            Symbolic font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Script">
            <summary>
            Script font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Nonsymbolic">
            <summary>
            Non-symbolic font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Italic">
            <summary>
            Italic font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.AllCap">
            <summary>
            All cap font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.SmallCap">
            <summary>
            Small cap font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.ForceBold">
            <summary>
            Force bold font
            </summary>
        </member>
        <member name="T:PdfFileWriter.KerningAdjust">
            <summary>
            Kerning adjustment class
            </summary>
            <remarks>
            Text position adjustment for TJ operator.
            The adjustment is for a font height of one point.
            Mainly used for font kerning.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.KerningAdjust.#ctor(System.String,System.Double)">
            <summary>
            Kerning adjustment constructor
            </summary>
            <param name="Text">Text</param>
            <param name="Adjust">Adjustment</param>
        </member>
        <member name="P:PdfFileWriter.KerningAdjust.Text">
            <summary>
            Gets or sets Text
            </summary>
        </member>
        <member name="P:PdfFileWriter.KerningAdjust.Adjust">
            <summary>
            Gets or sets adjustment
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfFont">
            <summary>
            PDF font class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#LanguageSupport">2.3 Language Support</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#FontResources">For example of defining font resources see 3.2. Font Resources</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfFont.#ctor(PdfFileWriter.PdfDocument,System.String,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            PDF Font resource constructor
            </summary>
            <param name="Document">Document object</param>
            <param name="FontFamilyName">Font family name</param>
            <param name="FontStyle">Font style</param>
            <param name="EmbeddedFont">Embedded font</param>
        </member>
        <member name="M:PdfFileWriter.PdfFont.ValidateChar(System.Char)">
            <summary>
            Validate character
            </summary>
            <param name="TestChar">Character</param>
            <returns>Returns the character or its substitute.</returns>
            <remarks>
            This program accepts character codes 32 to 126 and 160 to 255 and
            Unicode characters that were substituted.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CharSubstitution(System.Int32,System.Int32,System.Int32)">
            <summary>
            Character substitution
            </summary>
            <param name="OrigFrom">Start of actual Unicode range.</param>
            <param name="OrigTo">End of actual Unicode range.</param>
            <param name="DestFrom">Start of substitute range less than 256.</param>
            <remarks>
            This program accepts character codes 32 to 126 and 160 to 255.
            If the font supports characters above 255, you can map
            these codes into the valid region.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfFont.PdfText(System.String)">
            <summary>
            Convert c# text string to PDF text format
            </summary>
            <param name="Text">Source c# text</param>
            <returns>Destination PDF text</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.WindowsToPdf(System.Int32)">
            <summary>
            Windows design units to PDF design units
            </summary>
            <param name="Value">Font design value</param>
            <returns>Font PDF value</returns>
            <remarks>
            Font size is set to 1 point
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfFont.FontUnitsToUserUnits(System.Double,System.Double)">
            <summary>
            Font units to user units
            </summary>
            <param name="FontSize">Font size</param>
            <param name="Value">Design value</param>
            <returns>Design value in user units</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.FontUnitsToPdfDic(System.Double)">
            <summary>
            Font units to PDF dictionary values
            </summary>
            <param name="Value">Font design value</param>
            <returns>PDF dictionary value</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.LineSpacing(System.Double)">
            <summary>
            Line spacing in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Line spacing</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.Ascent(System.Double)">
            <summary>
            Font ascent in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font ascent</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.AscentPlusLeading(System.Double)">
            <summary>
            Font ascent in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font ascent plus half of internal leading.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.Descent(System.Double)">
            <summary>
            Font descent in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font descent</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.DescentPlusLeading(System.Double)">
            <summary>
            Font descent in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font descent plus half of internal leading.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CapHeight(System.Double)">
            <summary>
            Capital M height in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Capital M height</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.StrikeoutPosition(System.Double)">
            <summary>
            Strikeout position in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Strikeout position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.StrikeoutWidth(System.Double)">
            <summary>
            Strikeout width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Strikeout line width.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.UnderlinePosition(System.Double)">
            <summary>
            Underline position in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Underline position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.UnderlineWidth(System.Double)">
            <summary>
            Underline width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Underline line width.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SubscriptPosition(System.Double)">
            <summary>
            Subscript position in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Subscript position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SubscriptSize(System.Double)">
            <summary>
            Subscript character size in points
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Subscript font size</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SuperscriptPosition(System.Double)">
            <summary>
            Superscript character position
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Superscript position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SuperscriptSize(System.Double)">
            <summary>
            Superscript character size in points
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Superscript font size</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CharWidth(System.Double,System.Char)">
            <summary>
            Character width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <param name="CharValue">Character code</param>
            <returns>Character width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CharWidth(System.Double,PdfFileWriter.DrawStyle,System.Char)">
            <summary>
            Character width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <param name="DrawStyle">Draw style</param>
            <param name="CharValue">Character code</param>
            <returns>Character width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextWidth(System.Double,System.String)">
            <summary>
            Text width
            </summary>
            <param name="FontSize">Font size</param>
            <param name="Text">Text</param>
            <returns>Width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextFitToWidth(System.Double,System.Double,System.Double@,System.Double@,System.String)">
            <summary>
            Word spacing to stretch text to given width
            </summary>
            <param name="FontSize">Font size</param>
            <param name="ReqWidth">Required width</param>
            <param name="WordSpacing">Output word spacing</param>
            <param name="CharSpacing">Output character spacing</param>
            <param name="Text">Text</param>
            <returns>True-done, False-not done.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextBoundingBox(System.Double,System.String)">
            <summary>
            Text bounding box in user coordinate units.
            </summary>
            <param name="FontSize">Font size</param>
            <param name="Text">Text</param>
            <returns>Bounding box</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextKerning(System.String)">
            <summary>
            Text Kerning
            </summary>
            <param name="Text">Text</param>
            <returns>Kerning adjustment pairs</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextKerningWidth(System.Double,PdfFileWriter.KerningAdjust[])">
            <summary>
            Text kerning width
            </summary>
            <param name="FontSize">Font size</param>
            <param name="KerningArray">Kerning array</param>
            <returns>Width</returns>
        </member>
        <member name="T:PdfFileWriter.PdfImage">
            <summary>
            PDF Image class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#ImageSupport">2.4 Image Support</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawImage">For example of drawing image see 3.9. Draw Image and Clip it</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfImage.#ctor(PdfFileWriter.PdfDocument,System.String,System.Double,System.Int32)">
            <summary>
            Constructor for image file
            </summary>
            <param name="Document">PDF document (parent object)</param>
            <param name="ImageFileName">Image file name</param>
            <param name="Resolution">Resolution in pixels per inch (optional)</param>
            <param name="ImageQuality">Image quality 0 to 100 (optional)</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.#ctor(PdfFileWriter.PdfDocument,System.String,System.Drawing.Rectangle,System.Double,System.Int32)">
            <summary>
            Constructor for image file
            </summary>
            <param name="Document">PDF document (parent object)</param>
            <param name="ImageFileName">Image file name</param>
            <param name="CropRect">Crop rectangle (in pixels)</param>
            <param name="Resolution">Resolution in pixels per inch (optional)</param>
            <param name="ImageQuality">Image quality 0 to 100 (optional)</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.#ctor(PdfFileWriter.PdfDocument,System.String,System.Drawing.RectangleF,System.Double,System.Int32)">
            <summary>
            Constructor for image file
            </summary>
            <param name="Document">PDF document (parent object)</param>
            <param name="ImageFileName">Image file name</param>
            <param name="CropPercent">Crop rectangle (in percent of width and height)</param>
            <param name="Resolution">Resolution in pixels per inch (optional)</param>
            <param name="ImageQuality">Image quality 0 to 100 (optional)</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.#ctor(PdfFileWriter.PdfDocument,System.Drawing.Image,System.Double,System.Int32)">
            <summary>
            Constructor for image object
            </summary>
            <param name="Document">PDF document (parent object)</param>
            <param name="Image">Image bitmap or metafile</param>
            <param name="Resolution">Resolution in pixels per inch (optional)</param>
            <param name="ImageQuality">Image quality 0 to 100 (optional)</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.#ctor(PdfFileWriter.PdfDocument,System.Drawing.Image,System.Drawing.Rectangle,System.Double,System.Int32)">
            <summary>
            Constructor for image object
            </summary>
            <param name="Document">PDF document (parent object)</param>
            <param name="Image">Image bitmap or metafile</param>
            <param name="CropRect">Crop rectangle (in pixels)</param>
            <param name="Resolution">Resolution in pixels per inch (optional)</param>
            <param name="ImageQuality">Image quality 0 to 100 (optional)</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.#ctor(PdfFileWriter.PdfDocument,System.Drawing.Image,System.Drawing.RectangleF,System.Double,System.Int32)">
            <summary>
            Constructor for image object
            </summary>
            <param name="Document">PDF document (parent object)</param>
            <param name="Image">Image bitmap or metafile</param>
            <param name="CropPercent">Crop rectangle (in percent of width and height)</param>
            <param name="Resolution">Resolution in pixels per inch (optional)</param>
            <param name="ImageQuality">Image quality 0 to 100 (optional)</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.ImageSize(PdfFileWriter.SizeD)">
            <summary>
            Calculates image size to preserve aspect ratio.
            </summary>
            <param name="InputSize">Image display area.</param>
            <returns>Adjusted image display area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfImage.ImageSize(System.Double,System.Double)">
            <summary>
            Calculates image size to preserve aspect ratio.
            </summary>
            <param name="Width">Image display width.</param>
            <param name="Height">Image display height.</param>
            <returns>Adjusted image display area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfImage.ImageSizePosition(PdfFileWriter.SizeD,System.Drawing.ContentAlignment)">
            <summary>
            Calculates image size to preserve aspect ratio and sets position.
            </summary>
            <param name="InputSize">Image display area</param>
            <param name="Alignment">Content alignment</param>
            <returns>Adjusted image size and position within area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio and adjust
            position according to content alignment argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfImage.ImageSizePosition(System.Double,System.Double,System.Drawing.ContentAlignment)">
            <summary>
            Calculates image size to preserve aspect ratio and sets position.
            </summary>
            <param name="Width">Image display width</param>
            <param name="Height">Image display height</param>
            <param name="Alignment">Content alignment</param>
            <returns>Adjusted image size and position within area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio and adjust
            position according to content alignment argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfImage.Dispose">
            <summary>
            Dispose unmanaged resources
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfImage.WidthPix">
            <summary>
            Gets image width in pixels
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfImage.HeightPix">
            <summary>
            Gets image height in pixels
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfBookmark">
            <summary>
            PDF bookmark class
            </summary>
            <remarks>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#BookmarkSupport">2.9 Bookmark Support</a>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBookmark.AddBookmark(System.String,PdfFileWriter.PdfPage,System.Double,System.Boolean)">
            <summary>
            Add child bookmark
            </summary>
            <param name="Title">Bookmark title.</param>
            <param name="Page">Page</param>
            <param name="YPos">Vertical position.</param>
            <param name="OpenEntries">Open child bookmarks attached to this one.</param>
            <returns>Bookmark object</returns>
            <remarks>
            Add bookmark as a child to this bookmark.
            This method creates a new child bookmark item attached
            to this parent
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBookmark.AddBookmark(System.String,PdfFileWriter.PdfPage,System.Double,System.Drawing.Color,PdfFileWriter.PdfBookmark.TextStyle,System.Boolean)">
            <summary>
            Add child bookmark
            </summary>
            <param name="Title">Bookmark title.</param>
            <param name="Page">Page</param>
            <param name="YPos">Vertical position.</param>
            <param name="Paint">Bookmark color.</param>
            <param name="TextStyle">Bookmark text style.</param>
            <param name="OpenEntries">Open child bookmarks attached to this one.</param>
            <returns>Bookmark object</returns>
            <remarks>
            Add bookmark as a child to this bookmark.
            This method creates a new child bookmark item attached
            to this parent
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBookmark.AddBookmark(System.String,PdfFileWriter.PdfPage,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Add child bookmark
            </summary>
            <param name="Title">Bookmark title.</param>
            <param name="Page">Page</param>
            <param name="XPos">Horizontal position</param>
            <param name="YPos">Vertical position.</param>
            <param name="Zoom">Zoom factor (1.0 is 100%. 0.0 is no change from existing zoom).</param>
            <param name="OpenEntries">Open child bookmarks attached to this one.</param>
            <returns>Bookmark object</returns>
            <remarks>
            Add bookmark as a child to this bookmark.
            This method creates a new child bookmark item attached
            to this parent
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBookmark.AddBookmark(System.String,PdfFileWriter.PdfPage,System.Double,System.Double,System.Double,System.Drawing.Color,PdfFileWriter.PdfBookmark.TextStyle,System.Boolean)">
            <summary>
            Add child bookmark
            </summary>
            <param name="Title">Bookmark title.</param>
            <param name="Page">Page</param>
            <param name="XPos">Horizontal position</param>
            <param name="YPos">Vertical position.</param>
            <param name="Zoom">Zoom factor (1.0 is 100%. 0.0 is no change from existing zoom).</param>
            <param name="Paint">Bookmark color.</param>
            <param name="TextStyle">Bookmark text style.</param>
            <param name="OpenEntries">Open child bookmarks attached to this one.</param>
            <returns>Bookmark object</returns>
            <remarks>
            Add bookmark as a child to this bookmark.
            This method creates a new child bookmark item attached
            to this parent
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBookmark.GetChild(System.Int32[])">
            <summary>
            Gets child bookmark
            </summary>
            <param name="IndexArray">Array of indices</param>
            <returns>Child bookmark or null if not found.</returns>
            <remarks>
            Gets PdfBookmark object based on index.
            You can have multiple indices separated by commas
            i.e. GetChild(2, 3);
            Index is zero based. In the example we are looking first for
            the third bookmark child and then the forth bookmark of the 
            next level.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfBookmark.TextStyle">
            <summary>
            Bookmark text style enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmark.TextStyle.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmark.TextStyle.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmark.TextStyle.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmark.TextStyle.BoldItalic">
            <summary>
            Bold and italic
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfPage">
            <summary>
            PDF page class
            </summary>
            <remarks>
            PDF page class represent one page in the document.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            Default constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <remarks>
            Page size is taken from PdfDocument
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument,PdfFileWriter.SizeD)">
            <summary>
            Constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="PageSize">Paper size for this page</param>
            <remarks>
            PageSize override the default page size
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument,PdfFileWriter.PaperType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="PaperType">Paper type</param>
            <param name="Landscape">If Lanscape is true, width and height are swapped.</param>
            <remarks>
            PaperType and orientation override the default page size.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="Width">Page width</param>
            <param name="Height">Page height</param>
            <remarks>
            Width and Height override the default page size
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.AddContents(PdfFileWriter.PdfContents)">
            <summary>
            Add existing contents to page
            </summary>
            <param name="Contents">Contents object</param>
        </member>
        <member name="M:PdfFileWriter.PdfPage.AddWebLink(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Add weblink to this page
            </summary>
            <param name="LeftPos">Left position of weblink area</param>
            <param name="BottomPos">Bottom position of weblink area</param>
            <param name="RightPos">Right position of weblink area</param>
            <param name="TopPos">Top position of weblink area</param>
            <param name="WebLink">Hyperlink string</param>
            <remarks>
            <para>
            The four position arguments are in relation to the
            bottom left corner of the paper.
            If web link is empty, ignore this call.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#WeblinkSupport">2.7 Web Link Support</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.AddWebLink(PdfFileWriter.PdfRectangle,System.String)">
            <summary>
            Add weblink to this page
            </summary>
            <param name="WeblinkArea">Weblink area</param>
            <param name="WebLinkStr">Hyperlink string</param>
            <remarks>
            <para>
            The four position arguments are in relation to the
            bottom left corner of the paper.
            If web link is empty, ignore this call.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#WeblinkSupport">2.7 Web Link Support</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.AddScreenAction(PdfFileWriter.PdfRectangle,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Add rendering screen action to page
            </summary>
            <param name="Rect">Annotation rectangle</param>
            <param name="FileName">Media file name</param>
            <param name="WidthPix">Video width in pixels</param>
            <param name="HeightPix">Video height in pixels</param>
            <param name="MimeType">Media file Mime type</param>
        </member>
        <member name="T:PdfFileWriter.ErrorCorrection">
            <summary>
            QR Code error correction code enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.L">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.M">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.Q">
            <summary>
            Medium-high
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.H">
            <summary>
            High
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfQRCode">
            <summary>
            PDF QR Code resource class
            </summary>
            <remarks>
            <para>
            The QR Code object is a PDF Image object.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#QRCodeSupport">2.8 QR Code Support</a>
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfQRCode.SegmentMarker">
            <summary>
            Segment marker
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfQRCode.#ctor(PdfFileWriter.PdfDocument,System.String,PdfFileWriter.ErrorCorrection)">
            <summary>
            PDF QR Code constructor
            </summary>
            <param name="Document">Parent PDF document.</param>
            <param name="DataString">Data string to encode.</param>
            <param name="ErrorCorrection">Error correction code.</param>
        </member>
        <member name="M:PdfFileWriter.PdfQRCode.#ctor(PdfFileWriter.PdfDocument,System.String[],PdfFileWriter.ErrorCorrection)">
            <summary>
            PDF QR Code constructor
            </summary>
            <param name="Document">Parent PDF document.</param>
            <param name="SegDataString">Data string array to encode.</param>
            <param name="ErrorCorrection">Error correction code.</param>
            <remarks>
            The program will calculate the best encoding mode for each segment.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfQRCode.MatrixDimension">
            <summary>
            Gets matrix dimension.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQRCode.ModuleSize">
            <summary>
            Gets module size in pixels
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQRCode.QuietZone">
            <summary>
            Gets quiet zone in pixels.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQRCode.ImageSide">
            <summary>
            Gets image side in pixels.
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfRadialShading">
            <summary>
            PDF radial shading resource class
            </summary>
            <remarks>
            Derived class from PdfObject
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.#ctor(PdfFileWriter.PdfDocument,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PdfShadingFunction)">
            <summary>
            PDF radial shading constructor.
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <param name="ShadingFunction">Shading function</param>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.SetCircle(System.Double,System.Double,System.Double)">
            <summary>
            Set circle
            </summary>
            <param name="PosX">Centre position X</param>
            <param name="PosY">Centre position Y</param>
            <param name="Radius">Radius</param>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.SetCircles(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set two circles
            </summary>
            <param name="PosX0">Centre position0 X</param>
            <param name="PosY0">Centre position0 Y</param>
            <param name="Radius0">Radius0</param>
            <param name="PosX1">Centre position1 X</param>
            <param name="PosY1">Centre position1 Y</param>
            <param name="Radius1">Radius1</param>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.AntiAlias(System.Boolean)">
            <summary>
            Sets anti-alias parameter
            </summary>
            <param name="Value">Anti-alias true or false</param>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.ExtendShading(System.Boolean,System.Boolean)">
            <summary>
            Extend shading beyond axis
            </summary>
            <param name="Before">Before (true or false)</param>
            <param name="After">After (true or false)</param>
        </member>
        <member name="T:PdfFileWriter.PdfShadingFunction">
            <summary>
            PDF shading function class
            </summary>
            <remarks>
            PDF function to convert a number between 0 and 1 into a
            color red green and blue based on the sample color array.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfShadingFunction.#ctor(PdfFileWriter.PdfDocument,System.Drawing.Color[])">
            <summary>
            PDF Shading function constructor
            </summary>
            <param name="Document">Document object parent of this function.</param>
            <param name="ColorArray">Array of colors.</param>
        </member>
        <member name="T:PdfFileWriter.CellType">
            <summary>
            Cell type enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Empty">
            <summary>
            Cell's value is null.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Text">
            <summary>
            Cell's value is String and Style.MultiLineText is false.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.TextBox">
            <summary>
            Cell's value is TextBox or String with Style.MultiLineText is true.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Image">
            <summary>
            Cell's value is image.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.QRCode">
            <summary>
            Cell's value is QRCode.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Barcode">
            <summary>
            Cell's value is barcode.
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfTableCell">
            <summary>
            PDF table cell class
            </summary>
            <remarks>
            <para>
            The PDF table cell class represent one cell in the table.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DataTableSupport">2.12 Data Table Support</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableCell.CreateTextBox">
            <summary>
            Creates an empty text box with client width.
            </summary>
            <returns>Empty text box with client width.</returns>
            <remarks>
            <para>
            The newly created TextBox will have the correct client width.
            First line indent and line break factor will be taken from cell's style.
            </para>
            <para>
            CreateTextBox() method sets the Value property of this cell
            to the returned TextBox value;
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Index">
            <summary>
            Gets cell's index position within Table.Cell array.
            </summary>
            <remarks>
            It is the cell's column number starting with zero.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Header">
            <summary>
            Cell is a header.
            </summary>
            <remarks>
            If this property is true, the PdfTableCell is a header otherwise it is a cell.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Style">
            <summary>
            Gets or sets cell's style.
            </summary>
            <remarks>
            <para>
            If Style was not set by the caller, this value is the default cell style.
            Any change to the properties will affect all cells without cell style.
            </para>
            <para>
            If Style was set by the caller to a private style, this value is the private cell style.
            Any change to the properties will affect all other cells sharing this private cell style.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Type">
            <summary>
            Gets cell's enumeration type.
            </summary>
            <remarks>
            <para>
            CellType will be Text for String and MultiLineText set to false plus all basic numeric values.
            </para>
            <para>
            CallType will be TextBox for String and MultiLineText set to true or Value set to TextBox.
            </para>
            <para>
            CallType will be set ti Image, QRCode or Barcode if Value is set accordingly.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Value">
            <summary>
            Gets or sets cell's value
            </summary>
            <remarks>
            <para>
            Value can be set to String, basic numeric values, Boolean, Char, TextBox, PdfImage, PdfQRCode or Barcode.
            </para>
            <para>
            If value is set to String and MultiLineText is set to true, 
            the String will be converted to TextBox.
            </para>
            <para>
            All basic numeric values will be converted to String.
            </para>
            <para>
            Value will be reset to null after each row drawing.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.FormattedText">
            <summary>
            Gets cell's formatted value.
            </summary>
            <remarks>
            If Value is a numeric type, it is converted to formatted text
            using Value.ToString(Format, NumberFormat) method.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.TextBox">
            <summary>
            Gets TextBox if Type is TextBox.
            </summary>
            <remarks>
            TextBox will be set if Value is a String and Style.MultiLine is true,
            or Value is a TextBox.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.TextBoxHeight">
            <summary>
            Text box height including extra space
            </summary>
            <remarks>
            TextBoxHeight Value is calculated within DrawRow method. 
            It is valid for CustomDrawCellEvent.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Image">
            <summary>
            Gets Image if Type is Image.
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTableCell.ImageWidth"/>
            <seealso cref="P:PdfFileWriter.PdfTableCell.ImageHeight"/>
            <remarks>
            <para>
            If ImageWidth and ImageHeight were not set by the user,
            the image width will be set to ClientWidth and the height
            will be calculated to preserve image's aspect ratio.
            </para>
            <para>
            If ImageWidth was not set by the user and ImageHeight
            was set by the user. ImageWidth will be calculated to 
            preserve image's aspect ratio.
            </para>
            <para>
            If ImageWidth was set by the user and ImageHeight was
            not set by the user, ImageHeight will be calculated to 
            preserve image's aspect ratio.
            </para>
            <para>
            If both ImageWidth and ImageHeight were set by the user,
            the aspect ratio of the image will be ignored.
            </para>
            <para>
            If ImageWidth is wider than Client width, both ImageWidth
            and ImageHeight will be adjusted to fit the available width.
            </para>
            <para>
            ImageWidth and ImageHeight will be reset to zero after each row drawing.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ImageWidth">
            <summary>
            Gets or sets image width in user units.
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTableCell.Image"/>
            <remarks>
            Please note "Remarks" in Image property for description
            of ImageWidth and ImageHeight.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ImageHeight">
            <summary>
            Gets or sets image height in user units.
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTableCell.Image"/>
            <remarks>
            Please note "Remarks" in Image property for description
            of ImageWidth and ImageHeight.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.QRCode">
            <summary>
            Gets QR Code if Type is QRCode.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.QRCodeWidth">
            <summary>
            Gets or sets QR Code width and height
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTableCell.QRCode"/>
            <remarks>
            <para>
            QR Code is a square. QRCodeWidth is for both width and height.
            </para>
            <para>
            If QRCodeWidth was not set by the user or it is too wide, 
            it will be set to ClientWidth.
            </para>
            If QRCodeWidth is set by the user to a value less than
            ClientWidth, the value will be used for drawing.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Barcode">
            <summary>
            Gets barcode if type is Barcode
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.WebLink">
            <summary>
            Gets or sets web link for this cell.
            </summary>
            <remarks>
            <para>
            If weblink is set to a valid web site, the user can click 
            anywhere in the cell area while viewing in a PDF reader
            and activate his/her web explorer to go to this site.
            </para>
            <para>
            WebLink will be reset to null after each row drawing.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.FrameLeft">
            <summary>
            Gets cell's frame left side (grid line).
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.FrameWidth">
            <summary>
            Gets cell's frame width (grid line to grid line).
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientLeft">
            <summary>
            Gets client area left side.
            </summary>
            <remarks>
            ClientLeft is FrameLeft + Margin.Left.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientBottom">
            <summary>
            Gets client area bottom side.
            </summary>
            <remarks>
            ClientBottom is Table.RowBottomPosition + Margin.Bottom
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientRight">
            <summary>
            Gets client area right side.
            </summary>
            <remarks>
            ClientRight is FrameLeft + FrameWidth - Margin.Right.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientTop">
            <summary>
            Gets client area top side.
            </summary>
            <remarks>
            ClientTop is Table.RowTopPosition - Margin.Top.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientWidth">
            <summary>
            Gets Client area width.
            </summary>
            <remarks>
            <para>
            ClientWidth is FrameWidth - Margin.Left - Margin.Right.
            </para>
            <para>
            Calling client width before initialization will force initialization.
            Table.PdfTableInitialization() method will be called.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Parent">
            <summary>
            Gets parent PdfTable.
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfTableStyle">
            <summary>
            PDF table cell or header style class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DataTableSupport">2.12 Data Table Support</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.#ctor(PdfFileWriter.PdfFont)">
            <summary>
            PDF table style default constructor.
            </summary>
            <param name="Font">Font</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.#ctor(PdfFileWriter.PdfTable)">
            <summary>
            PDF table style constructor based on table's default cell style.
            </summary>
            <param name="Table">Table</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.#ctor(PdfFileWriter.PdfTableStyle)">
            <summary>
            PDF table style constructor as a copy of another style.
            </summary>
            <param name="Other">Copy constructor.</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.Copy(PdfFileWriter.PdfTableStyle)">
            <summary>
            Copy one style to another 
            </summary>
            <param name="SourceStyle">Source style</param>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.Alignment">
            <summary>
            Gets or sets content alignment.
            </summary>
            <remarks>
            Alignment property align the content within the client area of the cell.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.BackgroundColor">
            <summary>
            Gets or sets background color.
            </summary>
            <remarks>
            If background color is not empty, the frame area of the cell will 
            be painted by this color. Default is Color.Empty.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.BarcodeBarWidth">
            <summary>
            Gets or sets barcode narrow bar width
            </summary>
            <remarks>
            The width of the bar code narrow bar.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.BarcodeHeight">
            <summary>
            Gets or sets barcode height
            </summary>
            <remarks>
            The height of the barcode excluding optional text.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxFirstLineIndent">
            <summary>
            Gets or sets first line indent for text box items.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxLineBreakFactor">
            <summary>
            Gets or sets text box line break factor.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxLineExtraSpace">
            <summary>
            Gets or sets extra line spacing for text box items.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxParagraphExtraSpace">
            <summary>
            Gets or sets extra paragraph spacing for text box items.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxTextJustify">
            <summary>
            Gets or sets text justify within text box.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.Font">
            <summary>
            Gets or sets font.
            </summary>
            <remarks>
            If cell's value type is barcode, a null font signal no text under the barcode.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.FontSize">
            <summary>
            Gets or sets font size.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.ForegroundColor">
            <summary>
            Gets or sets foreground color.
            </summary>
            <remarks>
            Foreground color is used for text, QRCode and Barcode.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.Format">
            <summary>
            Gets or sets format string.
            </summary>
            <remarks>
            <para>
            All basic numeric values are converted to string using: 
            </para>
            <code>
            Value.ToString(Format, NumberFormatInfo);
            </code>
            <para>
            The NumberFormatInfo allows for regional formatting.
            </para>
            <para>
            Both Format and NumberFormatInfo are set to null by default.
            In other words by default the conversion is:
            </para>
            <code>
            Value.ToString();
            </code>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.Margin">
            <summary>
            Gets or sets cell's margins.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.RaiseCustomDrawCellEvent">
            <summary>
            Gets or sets raise custom draw cell event flag.
            </summary>
            <remarks>
            With this flag you can control which columns call the draw cell event handler.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextDrawStyle">
            <summary>
            Gets or sets text draw style.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.MinHeight">
            <summary>
            Gets or sets minimum cell height.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.MultiLineText">
            <summary>
            Gets or sets multi-line text flag.
            </summary>
            <remarks>
            String value will be converted to text box value.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.NumberFormatInfo">
            <summary>
            Gets or sets number format information.
            </summary>
            <remarks>
            <para>
            All basic numeric values are converted to string using: 
            </para>
            <code>
            Value.ToString(Format, NumberFormatInfo);
            </code>
            <para>
            The NumberFormatInfo allows for regional formatting.
            </para>
            <para>
            Both Format and NumberFormatInfo are set to null by default.
            In other words by default the conversion is:
            </para>
            <code>
            Value.ToString();
            </code>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.FontAscent">
            <summary>
            Gets font ascent for current font and font size.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.FontDescent">
            <summary>
            Gets font descent for current font and font size.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.FontLineSpacing">
            <summary>
            Gets font line spacing for current font and font size.
            </summary>
        </member>
        <member name="T:PdfFileWriter.TilingType">
            <summary>
            PDF tiling type enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TilingType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.TilingType.NoDistortion">
            <summary>
            No distortion
            </summary>
        </member>
        <member name="F:PdfFileWriter.TilingType.ConstantAndFast">
            <summary>
            Constant and fast
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfTilingPattern">
            <summary>
            PDF tiling pattern resource class
            </summary>
            <remarks>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#TilingPattern">For example of using tiling pattern see 3.3. Tiling Pattern</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#TilingPattern2">or 3.8. Draw Rectangle with Rounded Corners and Filled with Brick Pattern</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            PDF Tiling pattern constructor.
            </summary>
            <param name="Document">Document object parent of the object.</param>
            <remarks>
            This program support only color tiling pattern: PaintType = 1.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTilingType(PdfFileWriter.TilingType)">
            <summary>
            Set tiling type
            </summary>
            <param name="TilingType">Tiling type</param>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTileBox(System.Double)">
            <summary>
            Set tile box
            </summary>
            <param name="Side">Length of one side.</param>
            <remarks>
            Set square bounding box and equal step
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTileBox(System.Double,System.Double)">
            <summary>
            Set tile box
            </summary>
            <param name="Width">Box width.</param>
            <param name="Height">Box height.</param>
            <remarks>
            Set rectangle bounding box and equal step.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTileBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set bounding box and step 
            </summary>
            <param name="Width">Box width.</param>
            <param name="Height">Box height.</param>
            <param name="StepX">Horizontal step</param>
            <param name="StepY">Vertical step</param>
            <remarks>
            Set rectangle bounding box and independent step size.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetScale(System.Double)">
            <summary>
            Set scale
            </summary>
            <param name="Scale">Scale factor.</param>
            <remarks>
            Warning: the program replaces the transformation matrix
            with a new one [Scale 0 0 Scale 0 0].
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetScale(System.Double,System.Double)">
            <summary>
            Set scale
            </summary>
            <param name="ScaleX">Horizontal scale factor.</param>
            <param name="ScaleY">Vertical scale factor.</param>
            <remarks>
            Warning: the program replaces the transformation matrix
            with a new one [ScaleX 0 0 ScaleY 0 0].
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetScaleAndOrigin(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set scale and origin
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Scale X</param>
            <param name="ScaleY">Scale Y</param>
            <remarks>
            Warning: the program replaces the transformation matrix
            with a new one [ScaleX 0 0 ScaleY OriginX OriginY].
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetPatternMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set pattern transformation matrix
            </summary>
            <param name="a">A</param>
            <param name="b">B</param>
            <param name="c">C</param>
            <param name="d">D</param>
            <param name="e">E</param>
            <param name="f">F</param>
            <remarks>
            Xpage = a * Xuser + c * Yuser + e
            Ypage = b * Xuser + d * Yuser + f
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetBrickPattern(PdfFileWriter.PdfDocument,System.Double,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create new PdfTilingPattern class with brick pattern.
            </summary>
            <param name="Document">Current document object.</param>
            <param name="Scale">Scale factor.</param>
            <param name="Stroking">Stroking color.</param>
            <param name="NonStroking">Non-stroking color.</param>
            <returns>PDF tiling pattern</returns>
            <remarks>
            <para>
            The pattern is a square with one user unit side.
            </para>
            <para>
            The bottom half is one brick. The top half is two half bricks.
            </para>
            <para>
            Arguments:
            </para>
            <para>
            Scale the pattern to your requirements.
            </para>
            <para>
            Stroking color is the mortar color.
            </para>
            <para>
            Nonstroking color is the brick color.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetWeavePattern(PdfFileWriter.PdfDocument,System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create new PdfTilingPattern class with weave pattern.
            </summary>
            <param name="Document">Current PDF document.</param>
            <param name="Scale">Scale factor</param>
            <param name="Background">Background color.</param>
            <param name="Horizontal">Horizontal line color.</param>
            <param name="Vertical">Vertical line color.</param>
            <returns>PDF tiling pattern</returns>
            <remarks>
            <para>
            The pattern in a square with one user unit side.
            </para>
            <para>
            It is made of horizontal and vertical rectangles.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfBinaryWriter">
            <summary>
            PDF binary writer class
            </summary>
            <remarks>
            Extends .NET BinaryWriter class.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.#ctor(System.IO.FileStream)">
            <summary>
            PDF binary writer constructor
            </summary>
            <param name="Stream">File stream</param>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.WriteString(System.String)">
            <summary>
            Write String.
            </summary>
            <param name="Str">Input string</param>
            <remarks>
            Convert each character from two bytes to one byte.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.WriteString(System.Text.StringBuilder)">
            <summary>
            Write StringBuilder.
            </summary>
            <param name="Str">String builder input</param>
            <remarks>
            Convert each character from two bytes to one byte.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.WriteFormat(System.String,System.Object[])">
            <summary>
            Combine format string with write string.
            </summary>
            <param name="FormatStr">Standard format string</param>
            <param name="List">Array of objects</param>
        </member>
        <member name="T:PdfFileWriter.PdfWebLink">
            <summary>
            PDF Weblink class
            </summary>
            <remarks>
            <para>
            The library will make sure that all weblinks in the PDF file are unique.
            To create a weblink class you must use a static menthod. This method will
            create a new object for a new weblink. The mothod will return an 
            existing object if it is a duplicate.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfWebLink.AddWebLink(PdfFileWriter.PdfDocument,System.String)">
            <summary>
            Add a weblink
            </summary>
            <param name="Document">PDF document</param>
            <param name="WebLinkStr">Weblink text</param>
            <returns>Weblink object</returns>
            <remarks>
            <para>
            The library will make sure that all weblinks in the PDF file are unique.
            To create a weblink class you must use a static menthod. This method will
            create a new object for a new weblink. The mothod will return an 
            existing object if it is a duplicate.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfWebLink.CompareTo(PdfFileWriter.PdfWebLink)">
            <summary>
            Compare two WebLinkStr objects.
            </summary>
            <param name="Other">Other object.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:PdfFileWriter.PdfXObject">
            <summary>
            PDF X object resource class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfXObject.#ctor(PdfFileWriter.PdfDocument,System.Double,System.Double)">
            <summary>
            PDF X Object constructor
            </summary>
            <param name="Document">PDF document</param>
            <param name="Width">X Object width</param>
            <param name="Height">X Object height</param>
        </member>
        <member name="P:PdfFileWriter.PdfXObject.Rect">
            <summary>
            Bounding box rectangle
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfXObject.Left">
            <summary>
            Bounding box left side
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfXObject.Bottom">
            <summary>
            Bounding box bottom side
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfXObject.Right">
            <summary>
            Bounding box right side
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfXObject.Top">
            <summary>
            Bounding box top side
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfPrintDocument">
            <summary>
            PDF print document class
            </summary>
            <remarks>
            <para>
            It is a derived class of PrintDocument.
            The class converts the metafile output of PrintDocument
            to an image. The image is displayed in the PDF document.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#PrintDocumentSupport">2.11 Print Document Support</a>
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfPrintDocument.Document">
            <summary>
            Current PDF document
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfPrintDocument.Resolution">
            <summary>
            Image resolution
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfPrintDocument.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            PDF print document constructor
            </summary>
            <param name="Document">Current PDF document</param>
            <remarks>
            Set resolution to 96 pixels per inch
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPrintDocument.#ctor(PdfFileWriter.PdfDocument,System.Double)">
            <summary>
            PDF print document constructor
            </summary>
            <param name="Document">Current PDF document</param>
            <param name="Resolution">Image resolution</param>
        </member>
        <member name="M:PdfFileWriter.PdfPrintDocument.SetMargins(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets margins in user units.
            </summary>
            <param name="LeftMargin">Left margin</param>
            <param name="TopMargin">Top margin</param>
            <param name="RightMargin">Right margin</param>
            <param name="BottomMargin">Bottom margin</param>
        </member>
        <member name="M:PdfFileWriter.PdfPrintDocument.AddPagesToPdfDocument">
            <summary>
            Add pages to PDF document
            </summary>
            <remarks>
            The PrintDoc.Print method will call BeginPrint method,
            next it will call multiple times PrintPage method and finally
            it will call EndPrint method. 
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.CropRect">
            <summary>
            Crop rectangle
            </summary>
            <remarks>
            Dimensions are in user units. The origin is top left corner.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.DocumentInColor">
            <summary>
            Gets or sets DocumentInColor flag.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.GetMargins">
            <summary>
            Gets margins in 100th of an inch
            </summary>
        </member>
        <member name="P:PdfFileWriter.QRCode.MatrixDimension">
            <summary>
            Gets QR Code matrix dimension
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextBoxLine">
            <summary>
            TextBoxLine class
            </summary>
        </member>
        <member name="M:PdfFileWriter.TextBoxLine.#ctor(System.Double,System.Double,System.Boolean,PdfFileWriter.TextBoxSeg[])">
            <summary>
            TextBoxLine constructor.
            </summary>
            <param name="Ascent">Line ascent.</param>
            <param name="Descent">Line descent.</param>
            <param name="EndOfParagraph">Line is end of paragraph.</param>
            <param name="SegArray">Segments' array.</param>
        </member>
        <member name="P:PdfFileWriter.TextBoxLine.Ascent">
            <summary>
            Gets line ascent.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxLine.Descent">
            <summary>
            Gets line descent.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxLine.EndOfParagraph">
            <summary>
            Line is end of paragraph.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxLine.SegArray">
            <summary>
            Gets array of line segments.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxLine.LineHeight">
            <summary>
            Gets line height.
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextBoxSeg">
            <summary>
            TextBox line segment class
            </summary>
        </member>
        <member name="M:PdfFileWriter.TextBoxSeg.#ctor">
            <summary>
            TextBox segment default constructor.
            </summary>
        </member>
        <member name="M:PdfFileWriter.TextBoxSeg.#ctor(PdfFileWriter.PdfFont,System.Double,PdfFileWriter.DrawStyle,System.Drawing.Color,System.String)">
            <summary>
            TextBox segment constructor.
            </summary>
            <param name="Font">Segment font.</param>
            <param name="FontSize">Segment font size.</param>
            <param name="DrawStyle">Segment drawing style.</param>
            <param name="FontColor">Segment color.</param>
            <param name="WebLink">Segment web link.</param>
        </member>
        <member name="M:PdfFileWriter.TextBoxSeg.#ctor(PdfFileWriter.TextBoxSeg)">
            <summary>
            TextBox segment copy constructor.
            </summary>
            <param name="CopySeg">Source TextBox segment.</param>
        </member>
        <member name="M:PdfFileWriter.TextBoxSeg.IsEqual(PdfFileWriter.PdfFont,System.Double,PdfFileWriter.DrawStyle,System.Drawing.Color,System.String)">
            <summary>
            Compare two TextBox segments.
            </summary>
            <param name="Font">Segment font.</param>
            <param name="FontSize">Segment font size.</param>
            <param name="DrawStyle">Segment drawing style.</param>
            <param name="FontColor">Segment color.</param>
            <param name="WebLink">Segment web link.</param>
            <returns>Result</returns>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.Font">
            <summary>
            Gets segment font.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.FontSize">
            <summary>
            Gets segment font size.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.DrawStyle">
            <summary>
            Gets segment drawing style.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.FontColor">
            <summary>
            Gets segment color.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.SegWidth">
            <summary>
            Gets segment width.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.SpaceCount">
            <summary>
            Gets segment space character count.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.Text">
            <summary>
            Gets segment text.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBoxSeg.WebLink">
            <summary>
            Gets segment web link.
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextBox">
            <summary>
            TextBox class
            </summary>
            <remarks>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawTextBox">For example of drawing TextBox see 3.12. Draw Text Box</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.TextBox.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            TextBox constructor
            </summary>
            <param name="BoxWidth">Box width.</param>
            <param name="FirstLineIndent">First line is indented.</param>
            <param name="LineBreakFactor">Line break factor.</param>
        </member>
        <member name="M:PdfFileWriter.TextBox.Clear">
            <summary>
            Clear TextBox
            </summary>
        </member>
        <member name="M:PdfFileWriter.TextBox.BoxHeightExtra(System.Double,System.Double)">
            <summary>
            TextBox height including extra line and paragraph space.
            </summary>
            <param name="LineExtraSpace">Extra line space.</param>
            <param name="ParagraphExtraSpace">Extra paragraph space.</param>
            <returns>Height</returns>
        </member>
        <member name="M:PdfFileWriter.TextBox.Terminate">
            <summary>
            Terminate TextBox
            </summary>
        </member>
        <member name="M:PdfFileWriter.TextBox.AddText(PdfFileWriter.PdfFont,System.Double,System.String)">
            <summary>
            Add text to text box.
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="Text">Text</param>
        </member>
        <member name="M:PdfFileWriter.TextBox.AddText(PdfFileWriter.PdfFont,System.Double,System.String,System.String)">
            <summary>
            Add text to text box.
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="Text">Text</param>
            <param name="WebLink">Web link</param>
        </member>
        <member name="M:PdfFileWriter.TextBox.AddText(PdfFileWriter.PdfFont,System.Double,PdfFileWriter.DrawStyle,System.String)">
            <summary>
            Add text to text box.
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="DrawStyle">Drawing style</param>
            <param name="Text">Text</param>
        </member>
        <member name="M:PdfFileWriter.TextBox.AddText(PdfFileWriter.PdfFont,System.Double,System.Drawing.Color,System.String)">
            <summary>
            Add text to text box.
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="FontColor">Text color</param>
            <param name="Text">Text</param>
        </member>
        <member name="M:PdfFileWriter.TextBox.AddText(PdfFileWriter.PdfFont,System.Double,PdfFileWriter.DrawStyle,System.Drawing.Color,System.String,System.String)">
            <summary>
            Add text to text box.
            </summary>
            <param name="Font">Font</param>
            <param name="FontSize">Font size</param>
            <param name="DrawStyle">Drawing style</param>
            <param name="FontColor">Text color</param>
            <param name="Text">Text</param>
            <param name="WebLink">Web link</param>
        </member>
        <member name="P:PdfFileWriter.TextBox.BoxWidth">
            <summary>
            Gets box width.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBox.BoxHeight">
            <summary>
            Gets box height.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBox.LineCount">
            <summary>
            Gets line count.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBox.ParagraphCount">
            <summary>
            Gets paragraph count.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBox.FirstLineIndent">
            <summary>
            Gets first line is indented.
            </summary>
        </member>
        <member name="P:PdfFileWriter.TextBox.Item(System.Int32)">
            <summary>
            Access TextBoxLine array.
            </summary>
            <param name="Index">Index</param>
            <returns>TextBoxLine</returns>
        </member>
        <member name="P:PdfFileWriter.TextBox.LongestLineWidth">
            <summary>
            Longest line width
            </summary>
        </member>
    </members>
</doc>
